const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":65,\"nextId\":65,\"documentIds\":{\"0\":\"1\",\"1\":\"1@0\",\"2\":\"2\",\"3\":\"2@0\",\"4\":\"3\",\"5\":\"3@0\",\"6\":\"4\",\"7\":\"4#_1-生命周期钩子\",\"8\":\"4#_2-指令分类\",\"9\":\"4#_3-父子组件之间的数据传递\",\"10\":\"4#_4-双向数据绑定的原理\",\"11\":\"4#_5-组件和指令的区别\",\"12\":\"4#_6-ng-content指令\",\"13\":\"4#_7-router-navigate-的使用\",\"14\":\"4#_8-什么是viewencapsulation\",\"15\":\"4#_9-routeroutlet\",\"16\":\"4#_10-数据引用\",\"17\":\"4#_11-有几种数据绑定方式\",\"18\":\"4#_12-单页面应用和传统的web技术有什么不同\",\"19\":\"4#_13-observables-和promises的区别\",\"20\":\"4#_14-asyncpipe\",\"21\":\"4#_15-authentication-and-authorization的区别\",\"22\":\"4#_16-aot编译-和jit编译\",\"23\":\"4#_17-什么是redux\",\"24\":\"4#_18-什么是pipes\",\"25\":\"4#_19-ng-class-和-ng-style的区别\",\"26\":\"4#_20-component和module的区别\",\"27\":\"4#_21-怎样在组件中选择一个元素\",\"28\":\"4#_22-设置base-href-标签的作用\",\"29\":\"4#_23-observer-observable\",\"30\":\"4#_24-constructor-和-ngoninit-的本质区别\",\"31\":\"4#_25-angular的懒加载\",\"32\":\"4#_26-如何优化angular-2应用程序来获得更好的性能\",\"33\":\"4#_27-使用angular的好处\",\"34\":\"4#_28-angular的核心部件有哪些\",\"35\":\"4#_29-列举一下angular中的filter类型\",\"36\":\"4#_30-dirty-check是怎么回事\",\"37\":\"4#_31-dom和bom的区别是什么\",\"38\":\"4#_32-模板驱动表单和-响应式表单的比较\",\"39\":\"4#_33-contentchild-与-viewchild-的异同点\",\"40\":\"5\",\"41\":\"5#一、vue2-和-vue3-双向绑定-方法不同\",\"42\":\"5#vue3代码示例\",\"43\":\"5#vue2使用vue3写法代码示例\",\"44\":\"5#二、object-defineproperty-与new-proxy-的比较\",\"45\":\"5#总结\",\"46\":\"6\",\"47\":\"7\",\"48\":\"8\",\"49\":\"9\",\"50\":\"9#一、ref-基本类型\",\"51\":\"9#二、reactive-复杂类型\",\"52\":\"9#三、toref-解构某一个值\",\"53\":\"9#四、torefs-解构多个值\",\"54\":\"10\",\"55\":\"10#一、组件不使用teleport代码示例及效果演示\",\"56\":\"10#二、使用teleport传送门代码示例及效果演示\",\"57\":\"10#总结\",\"58\":\"11\",\"59\":\"11#vue3如果用setup写怎么组织代码\",\"60\":\"12\",\"61\":\"13\",\"62\":\"14\",\"63\":\"15\",\"64\":\"16\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,null,1],\"2\":[1],\"3\":[null,null,1],\"4\":[1],\"5\":[null,null,1],\"6\":[1],\"7\":[2,39],\"8\":[2,13],\"9\":[2,18],\"10\":[2,9],\"11\":[2,14],\"12\":[4,18],\"13\":[5,7],\"14\":[2,10],\"15\":[2,8],\"16\":[2,9],\"17\":[3,4],\"18\":[3,17],\"19\":[3,15],\"20\":[3,8],\"21\":[5,21],\"22\":[4,51],\"23\":[3,4],\"24\":[3,4],\"25\":[5,5],\"26\":[3,12],\"27\":[3,6],\"28\":[5,14],\"29\":[3,42],\"30\":[5,30],\"31\":[2,34],\"32\":[2,18],\"33\":[2,10],\"34\":[3,30],\"35\":[2,8],\"36\":[4,5],\"37\":[3,19],\"38\":[3,20],\"39\":[5,26],\"40\":[3],\"41\":[6],\"42\":[1,44],\"43\":[1,58],\"44\":[6,43],\"45\":[1,30],\"46\":[3,19],\"47\":[3,14],\"48\":[3,90],\"49\":[2],\"50\":[3,31],\"51\":[3,33],\"52\":[3,35],\"53\":[3,39],\"54\":[2],\"55\":[3,66],\"56\":[2,57],\"57\":[1,6],\"58\":[2,33],\"59\":[2,130],\"60\":[3,19],\"61\":[1,3],\"62\":[1],\"63\":[1],\"64\":[1]},\"averageFieldLength\":[2.6,21.97232584790188,0.6875],\"storedFields\":{\"0\":{\"h\":\"后端客栈\"},\"1\":{\"c\":[\"使用指南\"]},\"2\":{\"h\":\"面试汇总\"},\"3\":{\"c\":[\"使用指南\"]},\"4\":{\"h\":\"前端客栈\"},\"5\":{\"c\":[\"使用指南\"]},\"6\":{\"h\":\"Angular面试题汇总\"},\"7\":{\"h\":\"1. 生命周期钩子\",\"t\":[\"生命周期的顺序，见下图：\",\"angular面试题及答案_angular面试\",\"钩子方法\",\"用途\",\"ngOnChanges()\",\"当组件数据绑定的输入属性发生变化是触发，该方法接收一个SimpleChanges对象，包括当前值和上一个属性值。**首次调用一定发生在ngOnInit前，**值得注意的是该方法仅限于对象的引用发生变化时才会触发\",\"ngOnInit()\",\"初始化指令或组件，在angular第一次显示展示组件的绑定属性后调用，该方法只会调用一次\",\"ngDoCheck()\",\"检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应\",\"ngAfterContentInit()\",\"当把内容投影进组件之后调用，第一次调用ngDocheck()之后调用，只调用一次，只适用于组件\",\"ngAfterContentChecked()\",\"每次完成被投影组件内容的变更检测之后调用，只适用于组件\",\"ngAfterViewInit()\",\"当 Angular 初始化完组件视图及其子视图或包含该指令的视图之后调用\",\"ngAfterViewChecked()\",\"每次做完组件视图和子视图的变更检测之后调用，只适用于组件\",\"ngOnDestroy()\",\"在angular每次销毁组件或指令之前调用，通常用于移除事件监听，退订可观察对象，以防内存泄露\"]},\"8\":{\"h\":\"2. 指令分类\",\"t\":[\"组件：用于构建UI组件，继承于Directive类\",\"属性指令：用于改变组件的外观或行为\",\"ngClass\",\"ngStyle\",\"结构指令：用于动态添加或删除DOM元素来改变DOM布局\",\"ngIf\",\"ngFor\",\"ngSwitch\",\"自定义指令\"]},\"9\":{\"h\":\"3. 父子组件之间的数据传递\",\"t\":[\"@Input 父组件向子组件传递数据和传递方法(子组件中使用)\",\"@output 子组件传值给父组件 （事件传递的方式）（子组件中使用）\",\"//子组件中使用事件发射器 @output() somethingChanged = new EventEmitter(); somethingChanged.emit(value); \",\"使用@ViewChid父组件通过局部变量获取子组件的引用，主动获取子组件的数据和方法（父组件中使用）\"]},\"10\":{\"h\":\"4. 双向数据绑定的原理\",\"t\":[\"data => view：数据绑定，模板语法 [ ]\",\"view => data: 事件绑定，模板语法（）\",\"angular的双向数据绑定就是 数据绑定 + 事件绑定 ，模板语法 [()]\"]},\"11\":{\"h\":\"5. 组件和指令的区别\",\"t\":[\"component使用注解@Component修饰，directive使用注解@Directive修饰\",\"component是组件化思想，基于组件创建应用，把应用划分成细小的可重复利用的组件，而directive用来在已经存在的DOM元素上实现一些行为\",\"component是可重复使用的组件，directive是可重复使用的行为\",\"component可创建一个view，即template或templateUrl，而directive没有。\"]},\"12\":{\"h\":\"6. ng-content指令？\",\"t\":[\"像p标签或者h1标签，在标记之间可以添加内容， <p>this is a paragraph</p>那我们如果想在angular的标签之间添加内容呢，例如在<app-test></app-test>,这种情况下就可以使用<ng-content>tag directive is used</ng-content> \"]},\"13\":{\"h\":\"7. router.navigate 的使用？\",\"t\":[\"当我们想路由到一个组件的时候使用router.navigatethis.router.navigate(['./component name'])\"]},\"14\":{\"h\":\"8. 什么是ViewEncapsulation\",\"t\":[\"ViewEncapsulation 决定组件中定义的样式是否会影响整个应用程序。在Angular中有三种方法可以做到这一点: Emulated : 样式从其他HTML传播到组件。 Native : 来自其他HTML的样式不会传播到组件。 None:组件中定义的样式对所有组件都是可见的。\"]},\"15\":{\"h\":\"9. RouterOutlet\",\"t\":[\"<router-outlet></router-outlet> 简单理解：页面占位符,决定component显示在哪里，最终会被相应的component的view替换掉\"]},\"16\":{\"h\":\"10. {{}}数据引用\",\"t\":[\"与HTML标签一起使用，<h1>{{var}}</h1> var 是来自于ts（component）中的值。\"]},\"17\":{\"h\":\"11. 有几种数据绑定方式？\",\"t\":[\"属性绑定 [ ]\",\"事件绑定（）\",\"双向数据绑定 [()]\"]},\"18\":{\"h\":\"12. 单页面应用和传统的web技术有什么不同？\",\"t\":[\"在传统的web技术中，客户端请求一个web页面(HTML/JSP/asp)，服务器返回资源(或HTML页面)，客户端再次请求另一个页面，服务器用另一个资源响应。问题就在于请求/响应中消耗了大量时间，或者是重新加载使用了大量时间。而在SPA技术中，即使URL不断变化，我们也只维护一个页面(index.HTML)。\"]},\"19\":{\"h\":\"13. Observables 和Promises的区别\",\"t\":[\"Observables 是惰性的，意思是在subsciption之前什么都不会发生。\",\"​ Promise是eager的，意思是一旦创建，就会执行\",\"Observable是一个stream，可以传递0,1，或者多个事件，并且为每个事件回调。\",\"​ Promise只处理一个事件\",\"Observable可取消\",\"​ Promise不可取消\"]},\"20\":{\"h\":\"14. AsyncPipe ？\",\"t\":[\"当observable或promise返回data时，我们使用一个临时属性来保存内容。稍后，我们将相同的内容绑定到模板。通过使用AsyncPipe, promise或observable可以直接在模板中使用，而不需要临时属性。\"]},\"21\":{\"h\":\"15. Authentication and Authorization的区别？\",\"t\":[\"Authentication (认证) ： 用户登录凭据传递给(服务器上的)认证API。在服务器端验证凭据并返回JSON Web Token(JWT)。JWT是一个JSON对象，它有关于当前用户的一些信息或属性。一旦JWT返回给给客户端，客户端或用户将被该JWT所标记。\",\"Authorization（授权）：登录成功后，经过身份验证或真正的用户不能访问所有内容。用户未被授权访问其他人的数据，他/她被授权访问某些数据。\"]},\"22\":{\"h\":\"16. AOT编译 和JIT编译？\",\"t\":[\"Just-In-Time (JIT) 生成的JS代码，在浏览器中进行。\",\"​ — 大概的开发流程：\",\"​ – 使用Typescript开发\",\"​ – 使用tsc编译\",\"​ – 打包、压缩、部署\",\"​ 部署好之后，用户在浏览器端：\",\"​ – 浏览器下载js代码\",\"​ – angular启动，在浏览器中开始JIT的编译过程\",\"​ – 渲染页面\",\"Ahead-of-Time（AOT）生成的是TS代码\",\"​ — 流程：\",\"​ – typescript开发angular应用\",\"​ – 用ngc编译\",\"​ 用angular编译器对模板进行编译，生成typescript代码\",\"​ typescript编译车JavaScript\",\"​ – 打包部署\",\"​ 用户端\",\"​ – 下载代码\",\"​ – 启动angular\",\"​ – 页面渲染\",\"​ AOT优势\",\"​ 1、渲染得更快\",\"​ 2、需要的异步请求更少\",\"​ 3、需要下载的Angular框架体积更小\",\"​ 4、提早检测模板错误\",\"​ 5、更安全\",\"​ JIT优势\",\"​ 编译时间短，除非确实有动态组件的需求，否则jit唯一的优势就是能用来做在线 Demo和开发调试。\"]},\"23\":{\"h\":\"17. 什么是Redux?\",\"t\":[\"它是一个帮助我们维护应用程序状态的库。简单的数据流应用程序不需要Redux，它用于具有复杂数据流的单页应用程序。\"]},\"24\":{\"h\":\"18. 什么是Pipes?\",\"t\":[\"此功能用于更改模板上的输出;比如将字符串更改为大写并在模板上显示它。它还可以相应地更改日期格式。\"]},\"25\":{\"h\":\"19. ng-Class 和 ng-Style的区别\",\"t\":[\"ng-Class: 加载css类\",\"ng-Style:设置css样式\"]},\"26\":{\"h\":\"20. component和module的区别？\",\"t\":[\"component控制视图（html）.组件之间以及组件和service之间互相交互给app提供功能\",\"module是包括一个或多个组件，module不会控制视图（HTML）。module声明了哪些模块可以被其他模块使用，依赖注入了哪些类，以及启动的component，模块来管理组件，使app实现模块化。\"]},\"27\":{\"h\":\"21. 怎样在组件中选择一个元素？\",\"t\":[\"在组件的constructor中引入 ElementRef 来操作DOM元素 constructor(myElement: ElementRef)\"]},\"28\":{\"h\":\"22. 设置base href 标签的作用？\",\"t\":[\"angular路由器使用base href 作为组件、模板的基地址，开发期间，通常会在index.html所在目录中启动服务器，所以这个目录就是根目录，所以可以在index.html 的顶部添加。 当没有配置base标签时，加载应用会失败。\"]},\"29\":{\"h\":\"23. Observer / Observable\",\"t\":[\"Observable（可观察者） 接受一个Observer作为参数然后返回unsubscribe函数\",\"​ – 特征：\",\"​ — 是一个函数\",\"​ — 接受一个Observer对象（包含next、error、complete方法的对象）作为参数\",\"​ — 返回 unsubscribe 函数，用于取消订阅\",\"​ – 作用：\",\"​ — 作为生产者和观察者之间的桥梁，并返回一种方法来解除生产者和观察者之间的关系，其中观察者用于处理时间序列上的数据流。\",\"Observer (观察者)对象\",\"观察者用来接收可观察者发送过来的消息\",\"var observer = { next : x => console.log('Observer got a next value' + x), error : err => console.error('Observer got a error:' + err), complete: () => console.log('Observer got a complete notification') } 使用 observable.subscribe(observer); \"]},\"30\":{\"h\":\"24. Constructor 和 ngOnInit 的本质区别\",\"t\":[\"Constructor\",\"在ES6中 constructor表示构造函数，使用在class中。来初始化操作。当类被初始化之后，构造函数会被调用\",\"ngOnInit\",\"ngOnInit 是angular中OnInit钩子的实现，用来初始化组件。 ngOnInit : 在angular 第一次显示数据绑定和设置指令、组件的输入属性之后，初始化指令、组件 所以从angular的生命周期看，constructor是执行在先的 所以既然ngOnchanges是输入属性发生变化的时候调用，并且ngOnInit是在ngOnchanges执行之后才调用，而constructor是在组件实例化的时候就调用了，也就是说，在constructor中是取不到输入属性的值的。\",\"使用场景\",\"constructor 中不适合进行任何和组件通信类似的复杂操作，一般在constructor中进行一些简单的初始化操作，比如依赖注入、变量初始化等。\",\"ngOnInit可以用来初始化组件之间通信的，如异步请求等\"]},\"31\":{\"h\":\"25. Angular的懒加载\",\"t\":[\"默认情况下，在初始化的时候所有路由都会加载，导致加载缓慢，启动速度慢，所以可以使用懒加载 懒加载 ： 通俗 的讲就是进入主模块之后，子模块不加载，等真正访问到子模块之后，再去加载。使用loadChildren配置路由 知识点：\",\"RouterModule.forRoot() 用于主模块\",\"RouterModule.forChild() 用于子模块\",\"loadChildren\",\"const routes: Routes = [ {path:'',redirectTo:'child'}, {path:'child',loadChildren:'./children-load/children-load.module#ChildrenLoadModule'}, {path:'childNew',loadChildren:'./children-newload/children-newload.module#ChildrenNewloadModule'} ]; \"]},\"32\":{\"h\":\"26.\",\"t\":[\"1）考虑AOT编译。\",\"2）确保应用程序已经经过了捆绑，uglify和tree shaking。\",\"3）确保应用程序不存在不必要的import语句。\",\"4）确保应用中已经移除了不使用的第三方库。\",\"5）所有dependencies 和dev-dependencies都是明确分离的。\",\"6）如果应用程序较大时，我会考虑延迟加载而不是完全捆绑的应用程序。\"]},\"33\":{\"h\":\"27. 使用Angular的好处\",\"t\":[\"可以添加自定义的directive.\",\"优秀的社区支持。\",\"客户端和服务器的通讯非常便利。\",\"强大的功能比如动画和事件处理。\",\"使用mvc模式。\",\"支持双向数据绑定。\",\"支持依赖注入， restful service和有效验证。\"]},\"34\":{\"h\":\"28. Angular的核心部件有哪些?\",\"t\":[\"1、模块（Modules）\",\"2、组件（Components）\",\"3、模版（Templates）\",\"4、元数据（Metadata）\",\"5、数据绑定（Data Binding）\",\"6、指令（Directives）\",\"7、服务（Services）\",\"8、依赖注入（Dependency Injection）\",\"9、路由（routing）\"]},\"35\":{\"h\":\"29. 列举一下Angular中的filter类型\",\"t\":[\"Currency. Date. Filter. Json. limitTo lowercase number orderBy\"]},\"36\":{\"h\":\"30. Dirty check是怎么回事?\",\"t\":[\"Dirty check是比较新的数据跟老的数据的差别，如果看到有改变, 就用新的数据更新现有的视图。\"]},\"37\":{\"h\":\"31. DOM和BOM的区别是什么?\",\"t\":[\"Dom是document object model。Bom是browser object model。\",\"DOM代表的是网页的内容。Bom包含dom, 它还包含有浏览器的属性。\",\"Dom是一棵树结构，通过对应的API来访问里面的数据。Bom包含在全局的JavaScript对象里面，是window object的子成员。\",\"Dom用来操作html文档。Bom用来操作浏览器窗口。\",\"Dom有w3c的标准。Bom,对各个浏览器来说都是有自己具体的实现，都不一样。\"]},\"38\":{\"h\":\"32. 模板驱动表单和 响应式表单的比较\",\"t\":[\"Template-Driven Forms (模板驱动表单) 的特点\",\"使用方便\",\"适用于简单的场景\",\"通过 [(ngModel)] 实现数据双向绑定\",\"最小化组件类的代码\",\"不易于单元测试\",\"Reactive Forms (响应式表单) 的特点\",\"比较灵活\",\"适用于复杂的场景\",\"简化了HTML模板的代码，把验证逻辑抽离到组件类中\",\"方便的跟踪表单控件值的变化\",\"易于单元测试\"]},\"39\":{\"h\":\"33. ContentChild 与 ViewChild 的异同点\",\"t\":[\"相同点\",\"都是属性装饰器\",\"都有对应的复数形式装饰器：ContentChildren、ViewChildren\",\"都支持 Type(any) |Function|string 类型的选择器\",\"不同点\",\"ContentChild 用来从通过 Content Projection 方式 (ng-content) 设置的视图中获取匹配的元素\",\"ViewChild 用来从模板视图中获取匹配的元素\",\"在父组件的 ngAfterContentInit 生命周期钩子中才能成功获取通过 ContentChild 查询的元素\",\"在父组件的 ngAfterViewInit 生命周期钩子中才能成功获取通过 ViewChild 查询的元素\"]},\"40\":{\"h\":\"01-vue2和vue3区别？\"},\"41\":{\"h\":\"一、Vue2 和 Vue3 双向绑定 方法不同\"},\"42\":{\"h\":\"vue3代码示例\",\"t\":[\"<template> <div class=\\\"home\\\"> <img alt=\\\"Vue logo\\\" src=\\\"../assets/logo.png\\\"> {{ obj }} {{ obj.a }} ==> {{ obj.b }} ==> {{ obj.c }} <hr /> <button @click='addBtn'>添加</button> </div> </template> <script setup> import { reactive } from 'vue' let obj = reactive({ a:1, b:2 }); const addBtn = ()=>{ obj.c = 3; } </script> \",\"由此可见，即使vue3中，未使用$set方法，都可以实现数据与页面实时更新\"]},\"43\":{\"h\":\"vue2使用vue3写法代码示例\",\"t\":[\"<template> <div class=\\\"home\\\"> <img alt=\\\"Vue logo\\\" src=\\\"../assets/logo.png\\\"> {{ obj }} {{ obj.a }} ==> {{ obj.b }} ==> {{ obj.c }} <hr /> <button @click='addBtn'>添加</button> </div> </template> <script> export default { name: 'HomeView', data () { return { obj:{ a:1, b:2 } } }, methods:{ addBtn(){ //数据更新了视图没更新 this.obj.c = 3; console.log( this.obj ); } } } </script> \",\"由此可见，vue2项目中使用vue3的写法，那么会导致，数据更新了，但试图未更新\",\"vue2代码使用$set方法，即可实现数据与试图更新\",\"<template> <div class=\\\"home\\\"> <img alt=\\\"Vue logo\\\" src=\\\"../assets/logo.png\\\" /> {{ obj }} {{ obj.a }} ==> {{ obj.b }} ==> {{ obj.c }} <hr /> <button @click=\\\"addBtn\\\">添加</button> </div> </template> <script> export default { name: \\\"HomeView\\\", data() { return { obj: { a: 1, b: 2, }, }; }, methods: { addBtn() { //数据更新了视图没更新 // this.obj.c = 3; // console.log(this.obj); this.$set(this.obj, \\\"c\\\", 3); }, }, }; </script> \",\"由此，我们可以知道，在Vue3中，$set是不存在的，调用时会出现undefined，而在Vue2中，则需要使用到$set方法\"]},\"44\":{\"h\":\"二、Object.defineProperty()与new Proxy()的比较\",\"t\":[\"new Proxy()即使后添加的也可以劫持到，还不需要循环\",\"<script type=\\\"text/javascript\\\"> let data = { a:1, b:2 } let vue = new Proxy(data,{ get( target, propKey, receiver ){ console.log( '获取了' ); return Reflect.get(target, propKey, receiver); }, set( target, propKey, value, receiver ){ console.log( '设置了' ); return Reflect.set(target, propKey, value, receiver); } }) vue.c = 3; console.log( vue.c ) </script> \",\"Object.defineProperty()后添加的属性是劫持不到的\",\"<script type=\\\"text/javascript\\\"> let data = { a:1, b:2 } for( let k in data ){ Object.defineProperty(vue,k,{ get(){ console.log( '获取了' ); return data[k]; }, set( value ){ console.log( '设置了' ); data[k] = value; } }) } // 设置了 vue.c = 3; // 获取了 console.log( vue ); //打印结果只为3，根本没有被劫持到，但vue对象中有c的数据 </script> \"]},\"45\":{\"h\":\"总结\",\"t\":[\"1. Vue2 和 Vue3 双向绑定 方法不同 Vue2 : Object.defineProperty() ***后添加的属性是劫持不到的 Vue3 : new Proxy() ***即使后添加的也可以劫持到 ***还不需要循环 2. $set在vue3中没有，因为new Proxy不需要 3. 关于写法 vue2是选项式API vue3可以向下兼容（选项式API），也可以组合式api或Setup语法糖形式 4. v-if和v-for优先级不同了 5. $ref和$children也不同 \"]},\"46\":{\"h\":\"02-vue3如果用setup写怎么组织代码？\",\"t\":[\"说明：hooks（就是函数式），主要让功能模块细分,（提升项目的维护性） 解决问题：<script setup> //代码==》比较乱 </script> 面试题：你们vue3写代码的方式 ==〉setup形式 解决：使用hooks去管理维护代码 \"]},\"47\":{\"h\":\"03-vue3如果用setup写如何获取类似于vue2中的this？\",\"t\":[\"import { getCurrentInstance } from 'vue' let app = getCurrentInstance(); console.log( app.appContext.app.config.globalProperties.$loading ) \"]},\"48\":{\"h\":\"04-vue3常用api有哪些？\",\"t\":[\"1. createApp() ==》 创建一个应用实例。 说明：等于Vue2的==》new Vue() 使用场景：写插件(封装全局组件会使用) 2. provide/inject ==》依赖注入 说明：其实就是传值 使用场景：某一个父组件传值 到后代组件，如果层级过多传递麻烦，所以使用 缺点：不好维护和查询数据来源 3. directive 说明：自定义指令 场景：后台管理系统中的按钮权限控制（ 一个用户拥有某些权限，但是只能查看和修改，不能删除） 4. mixin 说明：1.全局混入 2. 局部 场景：可以添加生命周期，我在小程序的分享功能会用到 缺点：不好维护和查询数据来源 5. app.config.globalProperties 说明：获取vue这个全局对象的属性和方法 场景：自己封装插件的时候需要把方法添加到对象中 6. nextTick 说明：等待下一次 DOM 更新刷新的工具方法 ：nextTick返回一个Pormise，回调函数是放在Promise中的，所以是异步执行的 场景：就是把dom要更新，那么vue是数据驱动dom，所以数据的赋值就要在nextTick进行 7. computed 说明：计算属性 场景：有缓存 8. reactive、ref 说明：来定义数据的和vue2的data类似 9. watch 说明：监听（Vue3不需要深度监听） 10. markRaw() 说明：不被new Proxy代理，说白了就是静态的数据 11. defineProps() 说明：父组件传递的值，子组件使用setup的形式，需要用defineProps接收 12. defineEmits() 当前组件使用setup形式，自定义事件需要使用defineEmits 13. slot 说明：分为 1. 匿名 2. 具名 3. 作用域 场景：后台管理系统，左侧是固定菜单，右侧是不固定内容，那么右侧就是slot \"]},\"49\":{\"h\":\"05-vue3常用的响应式数据类型\"},\"50\":{\"h\":\"一、ref 基本类型\",\"t\":[\"<template> <div class=\\\"home\\\"> {{ sum }} <button @click='btn'>按钮</button> </div> </template> <script setup> import { ref } from 'vue' let sum = ref(10); const btn = ()=>{ sum.value = 200; // 因为是要改变sum的值，所以需要sum.value } </script> \"]},\"51\":{\"h\":\"二、reactive 复杂类型\",\"t\":[\"<template> <div class=\\\"home\\\"> {{ obj }} <button @click='btn'>按钮</button> </div> </template> <script setup> import { reactive } from 'vue' let obj = reactive({ name:'张三', age:18, sex:'男' }) const btn = ()=>{ obj.name = '王武' } </script> \"]},\"52\":{\"h\":\"三、toRef 解构某一个值\",\"t\":[\"<template> <div class=\\\"home\\\"> {{ name }} <button @click='btn'>按钮</button> </div> </template> <script setup> import { toRef } from 'vue' let obj = reactive({ name:'张三', age:18, sex:'男' }) let name = toRef(obj,'name'); //解构某一个值 const btn = ()=>{ obj.name = '王武' } </script> \"]},\"53\":{\"h\":\"四、toRefs 解构多个值\",\"t\":[\"<template> <div class=\\\"home\\\"> {{ name }} <button @click='btn'>按钮</button> </div> </template> <script setup> import { ref , reactive , toRef , toRefs } from 'vue' let obj = reactive({ name:'张三', age:18, sex:'男' }) let { name , age } = toRefs(obj); // 解构多个值 const btn = ()=>{ name.value = '张小三'; // 改变name的值 } </script> \"]},\"54\":{\"h\":\"06-teleport组件及其使用场景\"},\"55\":{\"h\":\"一、组件不使用 代码示例及效果演示\",\"t\":[\"index.vue代码\",\"<template> <div class=\\\"home\\\"> <A /> <B /> </div> </template> <script setup> import A from '@/components/A' import B from '@/components/B' </script> <style> .home{ display: flex; height: 700px; } </style> \",\"组件A代码\",\"<template> <div style='width:300px;background: red;'> 左边 </div> </template> \",\"组件B代码\",\"<template> <div style=\\\"background: blue;flex:1;\\\" class='box'> 右边 <button @click='btn'>按钮</button> <div class='mo' v-if='show'></div> </div> </template> <script setup> import { ref } from 'vue' let show = ref(false); const btn = ()=>{ show.value=true; } </script> <style> .box{ position: relative; } .mo{ width: 300px; height: 300px; background: orange; position: absolute; left: 50%; top: 50%; margin-left: -150px; margin-top: -150px; } </style> \",\"效果展示\"]},\"56\":{\"h\":\"二、使用teleport传送门代码示例及效果演示\",\"t\":[\"修改组件B代码\",\"<template> <div style=\\\"background: blue;flex:1;\\\" class='box'> 右边 <button @click='btn'>按钮</button> <teleport to=\\\"body\\\"> <div class=\\\"mo\\\" v-if=\\\"show\\\"></div> </teleport> </div> </template> <script setup> import { ref } from 'vue' let show = ref(false); const btn = ()=>{ show.value=true; } </script> <style> .box{ position: relative; } .mo{ width: 300px; height: 300px; background: orange; position: absolute; left: 50%; top: 50%; margin-left: -150px; margin-top: -150px; } </style> \",\"效果展示\"]},\"57\":{\"h\":\"总结\",\"t\":[\"teleport组件是一个传送门 假如自己写弹出框，需要在页面居中位置展示，不受当前组件的限制，可以把盒子传送到body中 \"]},\"58\":{\"h\":\"vue2和vue3区别？\",\"t\":[\"1. Vue2 和 Vue3 双向绑定 方法不同 Vue2 : Object.defineProperty() ***后添加的属性是劫持不到的 Vue3 : new Proxy() ***即使后添加的也可以劫持到 ***还不需要循环 3. $set在vue3中没有，因为new Proxy不需要 4. 关于写法 vue2是选项式API vue3可以向下兼容（选项式API），也可以组合式api或Setup语法糖形式 5. v-if和v-for优先级不同了 6. $ref和$children也不同 7. 如果大家还知道其他api不同点，随便说说就可以了 \"]},\"59\":{\"h\":\"vue3如果用setup写怎么组织代码？\",\"t\":[\"说明：hooks（就是函数式），主要让功能模块细分（提升项目的维护性） 解决问题：<script setup> //代码==》比较乱 </script> 面试题：你们vue3写代码的方式 ==〉setup形式 解决：hooks \",\"vue3如果用setup写如何获取类似于vue2中的this？\",\"import { getCurrentInstance } from 'vue' let app = getCurrentInstance(); console.log( app.appContext.app.config.globalProperties.$loading ) \",\"vue3常用api有哪些？\",\"1. createApp() ==》 创建一个应用实例。 说明：等于Vue2的==》new Vue() 使用场景：写插件(封装全局组件会使用) 2. provide/inject ==》依赖注入 说明：其实就是传值 使用场景：某一个父组件传值 到后代组件，如果层级过多传递麻烦，所以使用 缺点：不好维护和查询数据来源 3. directive 说明：自定义指令 场景：后台管理系统中的按钮权限控制（ 一个用户拥有某些权限，但是只能查看和修改，不能删除） 4. mixin 说明：1.全局混入 2. 局部 场景：可以添加生命周期，我在小程序的分享功能会用到 缺点：不好维护和查询数据来源 5. app.config.globalProperties 说明：获取vue这个全局对象的属性和方法 场景：自己封装插件的时候需要把方法添加到对象中 6. nextTick 说明：等待下一次 DOM 更新刷新的工具方法 ：nextTick返回一个Pormise，回调函数是放在Promise中的，所以是异步执行的 场景：就是把dom要更新，那么vue是数据驱动dom，所以数据的赋值就要在nextTick进行 7. computed 说明：计算属性 场景：有缓存 8. reactive、ref 说明：来定义数据的和vue2的data类似 9. watch 说明：监听（Vue3不需要深度监听） 10. markRaw() 说明：不被new Proxy代理，说白了就是静态的数据 11. defineProps() 说明：父组件传递的值，子组件使用setup的形式，需要用defineProps接收 12. defineEmits() 当前组件使用setup形式，自定义事件需要使用defineEmits 13. slot 说明：分为 1. 匿名 2. 具名 3. 作用域 场景：后台管理系统，左侧是固定菜单，右侧是不固定内容，那么右侧就是slot \",\"请介绍一下vue3常用的响应式数据类型\",\"ref ：基本类型 reactive ：复杂类型 toRef ：解构某一个值 toRefs ： 解构多个值 \",\"请介绍一下teleport组件及其使用场景\",\"teleport组件是一个传送门 假如自己写弹出框，需要在页面居中位置展示，不受当前组件的限制，可以把盒子传送到body中 \"]},\"60\":{\"h\":\"02-vue3如果用setup写怎么组织代码？\",\"t\":[\"说明：hooks（就是函数式），主要让功能模块细分,（提升项目的维护性） 解决问题：<script setup> //代码==》比较乱 </script> 面试题：你们vue3写代码的方式 ==〉setup形式 解决：使用hooks去管理维护代码 \"]},\"61\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"62\":{\"h\":\"Angular\"},\"63\":{\"h\":\"Vue3\"},\"64\":{\"h\":\"Vue\"}},\"dirtCount\":0,\"index\":[[\"请介绍一下teleport组件及其使用场景\",{\"1\":{\"59\":1}}],[\"请介绍一下vue3常用的响应式数据类型\",{\"1\":{\"59\":1}}],[\"随便说说就可以了\",{\"1\":{\"58\":1}}],[\"假如自己写弹出框\",{\"1\":{\"57\":1,\"59\":1}}],[\"修改组件b代码\",{\"1\":{\"56\":1}}],[\"效果展示\",{\"1\":{\"55\":1,\"56\":1}}],[\"右边\",{\"1\":{\"55\":1,\"56\":1}}],[\"右侧是不固定内容\",{\"1\":{\"48\":1,\"59\":1}}],[\"左边\",{\"1\":{\"55\":1}}],[\"左侧是固定菜单\",{\"1\":{\"48\":1,\"59\":1}}],[\"代码示例及效果演示\",{\"0\":{\"55\":1}}],[\"代码==\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"改变name的值\",{\"1\":{\"53\":1}}],[\"张小三\",{\"1\":{\"53\":1}}],[\"张三\",{\"1\":{\"51\":1,\"52\":1,\"53\":1}}],[\"四\",{\"0\":{\"53\":1}}],[\"解构多个值\",{\"0\":{\"53\":1},\"1\":{\"53\":1,\"59\":1}}],[\"解构某一个值\",{\"0\":{\"52\":1},\"1\":{\"52\":1,\"59\":1}}],[\"解决\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"解决问题\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"三\",{\"0\":{\"52\":1}}],[\"王武\",{\"1\":{\"51\":1,\"52\":1}}],[\"男\",{\"1\":{\"51\":1,\"52\":1,\"53\":1}}],[\"复杂类型\",{\"0\":{\"51\":1},\"1\":{\"59\":1}}],[\"因为是要改变sum的值\",{\"1\":{\"50\":1}}],[\"因为new\",{\"1\":{\"45\":1,\"58\":1}}],[\"基本类型\",{\"0\":{\"50\":1},\"1\":{\"59\":1}}],[\"基于组件创建应用\",{\"1\":{\"11\":1}}],[\"具名\",{\"1\":{\"48\":1,\"59\":1}}],[\"匿名\",{\"1\":{\"48\":1,\"59\":1}}],[\"分为\",{\"1\":{\"48\":1,\"59\":1}}],[\"说白了就是静态的数据\",{\"1\":{\"48\":1,\"59\":1}}],[\"说明\",{\"1\":{\"46\":1,\"48\":12,\"59\":13,\"60\":1}}],[\"监听\",{\"1\":{\"48\":1,\"59\":1}}],[\"width\",{\"1\":{\"55\":2,\"56\":1}}],[\"watch\",{\"1\":{\"48\":1,\"59\":1}}],[\"web\",{\"1\":{\"21\":1}}],[\"有缓存\",{\"1\":{\"48\":1,\"59\":1}}],[\"有几种数据绑定方式\",{\"0\":{\"17\":1}}],[\"计算属性\",{\"1\":{\"48\":1,\"59\":1}}],[\"那么右侧就是slot\",{\"1\":{\"48\":1,\"59\":1}}],[\"那么vue是数据驱动dom\",{\"1\":{\"48\":1,\"59\":1}}],[\"那么会导致\",{\"1\":{\"43\":1}}],[\"回调函数是放在promise中的\",{\"1\":{\"48\":1,\"59\":1}}],[\"更新刷新的工具方法\",{\"1\":{\"48\":1,\"59\":1}}],[\"更安全\",{\"1\":{\"22\":1}}],[\"自定义事件需要使用defineemits\",{\"1\":{\"48\":1,\"59\":1}}],[\"自定义指令\",{\"1\":{\"8\":1,\"48\":1,\"59\":1}}],[\"自己封装插件的时候需要把方法添加到对象中\",{\"1\":{\"48\":1,\"59\":1}}],[\"获取vue这个全局对象的属性和方法\",{\"1\":{\"48\":1,\"59\":1}}],[\"获取了\",{\"1\":{\"44\":3}}],[\"局部\",{\"1\":{\"48\":1,\"59\":1}}],[\"全局混入\",{\"1\":{\"48\":1,\"59\":1}}],[\"场景\",{\"1\":{\"48\":6,\"59\":6}}],[\"缺点\",{\"1\":{\"48\":2,\"59\":2}}],[\"到后代组件\",{\"1\":{\"48\":1,\"59\":1}}],[\"某一个父组件传值\",{\"1\":{\"48\":1,\"59\":1}}],[\"其实就是传值\",{\"1\":{\"48\":1,\"59\":1}}],[\"其中观察者用于处理时间序列上的数据流\",{\"1\":{\"29\":1}}],[\"封装全局组件会使用\",{\"1\":{\"48\":1,\"59\":1}}],[\"写插件\",{\"1\":{\"48\":1,\"59\":1}}],[\"等待下一次\",{\"1\":{\"48\":1,\"59\":1}}],[\"等于vue2的==\",{\"1\":{\"48\":1,\"59\":1}}],[\"等真正访问到子模块之后\",{\"1\":{\"31\":1}}],[\"创建一个应用实例\",{\"1\":{\"48\":1,\"59\":1}}],[\"你们vue3写代码的方式\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"面试题\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"面试汇总\",{\"0\":{\"2\":1}}],[\"提升项目的维护性\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"提早检测模板错误\",{\"1\":{\"22\":1}}],[\"主要让功能模块细分\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"主动获取子组件的数据和方法\",{\"1\":{\"9\":1}}],[\"06\",{\"0\":{\"54\":1}}],[\"05\",{\"0\":{\"49\":1}}],[\"04\",{\"0\":{\"48\":1}}],[\"03\",{\"0\":{\"47\":1}}],[\"02\",{\"0\":{\"46\":1,\"60\":1}}],[\"01\",{\"0\":{\"40\":1}}],[\"$loading\",{\"1\":{\"47\":1,\"59\":1}}],[\"$ref和$children也不同\",{\"1\":{\"45\":1,\"58\":1}}],[\"$set在vue3中没有\",{\"1\":{\"45\":1,\"58\":1}}],[\"$set是不存在的\",{\"1\":{\"43\":1}}],[\"$set\",{\"1\":{\"43\":1}}],[\"也可以组合式api或setup语法糖形式\",{\"1\":{\"45\":1,\"58\":1}}],[\"也就是说\",{\"1\":{\"30\":1}}],[\"选项式api\",{\"1\":{\"45\":1,\"58\":1}}],[\"关于写法\",{\"1\":{\"45\":1,\"58\":1}}],[\"总结\",{\"0\":{\"45\":1,\"57\":1}}],[\"但是只能查看和修改\",{\"1\":{\"48\":1,\"59\":1}}],[\"但vue对象中有c的数据\",{\"1\":{\"44\":1}}],[\"但试图未更新\",{\"1\":{\"43\":1}}],[\"根本没有被劫持到\",{\"1\":{\"44\":1}}],[\"打印结果只为3\",{\"1\":{\"44\":1}}],[\"打包部署\",{\"1\":{\"22\":1}}],[\"打包\",{\"1\":{\"22\":1}}],[\"k\",{\"1\":{\"44\":4}}],[\"后台管理系统\",{\"1\":{\"48\":1,\"59\":1}}],[\"后台管理系统中的按钮权限控制\",{\"1\":{\"48\":1,\"59\":1}}],[\"后添加的属性是劫持不到的\",{\"1\":{\"44\":1,\"45\":1,\"58\":1}}],[\"后端客栈\",{\"0\":{\"0\":1}}],[\"globalproperties\",{\"1\":{\"47\":1,\"48\":1,\"59\":2}}],[\"getcurrentinstance\",{\"1\":{\"47\":2,\"59\":2}}],[\"get\",{\"1\":{\"44\":3}}],[\"got\",{\"1\":{\"29\":3}}],[\"还不需要循环\",{\"1\":{\"44\":1,\"45\":1,\"58\":1}}],[\"二\",{\"0\":{\"44\":1,\"51\":1,\"56\":1}}],[\"则需要使用到$set方法\",{\"1\":{\"43\":1}}],[\"调用时会出现undefined\",{\"1\":{\"43\":1}}],[\"由此\",{\"1\":{\"43\":1}}],[\"由此可见\",{\"1\":{\"42\":1,\"43\":1}}],[\"未使用$set方法\",{\"1\":{\"42\":1}}],[\"><\",{\"1\":{\"55\":1,\"56\":1}}],[\">按钮<\",{\"1\":{\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1}}],[\">添加<\",{\"1\":{\"42\":1,\"43\":2}}],[\">\",{\"1\":{\"42\":3,\"43\":6,\"44\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":5,\"56\":2}}],[\"双向绑定\",{\"0\":{\"41\":1},\"1\":{\"45\":1,\"58\":1}}],[\"双向数据绑定\",{\"1\":{\"17\":1}}],[\"双向数据绑定的原理\",{\"0\":{\"10\":1}}],[\"查询的元素\",{\"1\":{\"39\":2}}],[\"方法不同\",{\"0\":{\"41\":1},\"1\":{\"45\":1,\"58\":1}}],[\"方式\",{\"1\":{\"39\":1}}],[\"方便的跟踪表单控件值的变化\",{\"1\":{\"38\":1}}],[\"不受当前组件的限制\",{\"1\":{\"57\":1,\"59\":1}}],[\"不被new\",{\"1\":{\"48\":1,\"59\":1}}],[\"不能删除\",{\"1\":{\"48\":1,\"59\":1}}],[\"不好维护和查询数据来源\",{\"1\":{\"48\":2,\"59\":2}}],[\"不同点\",{\"1\":{\"39\":1}}],[\"不易于单元测试\",{\"1\":{\"38\":1}}],[\"类型的选择器\",{\"1\":{\"39\":1}}],[\"|function|string\",{\"1\":{\"39\":1}}],[\"都可以实现数据与页面实时更新\",{\"1\":{\"42\":1}}],[\"都支持\",{\"1\":{\"39\":1}}],[\"都有对应的复数形式装饰器\",{\"1\":{\"39\":1}}],[\"都是属性装饰器\",{\"1\":{\"39\":1}}],[\"都不一样\",{\"1\":{\"37\":1}}],[\"相同点\",{\"1\":{\"39\":1}}],[\"与new\",{\"0\":{\"44\":1}}],[\"与\",{\"0\":{\"39\":1}}],[\"与html标签一起使用\",{\"1\":{\"16\":1}}],[\"易于单元测试\",{\"1\":{\"38\":1}}],[\"把验证逻辑抽离到组件类中\",{\"1\":{\"38\":1}}],[\"把应用划分成细小的可重复利用的组件\",{\"1\":{\"11\":1}}],[\"简化了html模板的代码\",{\"1\":{\"38\":1}}],[\"简单的数据流应用程序不需要redux\",{\"1\":{\"23\":1}}],[\"简单理解\",{\"1\":{\"15\":1}}],[\"适用于复杂的场景\",{\"1\":{\"38\":1}}],[\"适用于简单的场景\",{\"1\":{\"38\":1}}],[\"比较乱\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"比较灵活\",{\"1\":{\"38\":1}}],[\"比如依赖注入\",{\"1\":{\"30\":1}}],[\"比如将字符串更改为大写并在模板上显示它\",{\"1\":{\"24\":1}}],[\"最小化组件类的代码\",{\"1\":{\"38\":1}}],[\"最终会被相应的component的view替换掉\",{\"1\":{\"15\":1}}],[\"实现数据双向绑定\",{\"1\":{\"38\":1}}],[\"响应式表单\",{\"1\":{\"38\":1}}],[\"响应式表单的比较\",{\"0\":{\"38\":1}}],[\"响应中消耗了大量时间\",{\"1\":{\"18\":1}}],[\"对各个浏览器来说都是有自己具体的实现\",{\"1\":{\"37\":1}}],[\"对象\",{\"1\":{\"29\":1}}],[\"body\",{\"1\":{\"56\":1}}],[\"box\",{\"1\":{\"55\":2,\"56\":2}}],[\"bom\",{\"1\":{\"37\":1}}],[\"bom用来操作浏览器窗口\",{\"1\":{\"37\":1}}],[\"bom包含在全局的javascript对象里面\",{\"1\":{\"37\":1}}],[\"bom包含dom\",{\"1\":{\"37\":1}}],[\"bom是browser\",{\"1\":{\"37\":1}}],[\"blue\",{\"1\":{\"55\":1,\"56\":1}}],[\"background\",{\"1\":{\"55\":3,\"56\":2}}],[\"btn\",{\"1\":{\"50\":2,\"51\":2,\"52\":2,\"53\":2,\"55\":2,\"56\":2}}],[\"button>\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1}}],[\"b\",{\"1\":{\"42\":2,\"43\":4,\"44\":2,\"55\":2}}],[\"binding\",{\"1\":{\"34\":1}}],[\"就是把dom要更新\",{\"1\":{\"48\":1,\"59\":1}}],[\"就是函数式\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"就用新的数据更新现有的视图\",{\"1\":{\"36\":1}}],[\"就会执行\",{\"1\":{\"19\":1}}],[\"left\",{\"1\":{\"55\":2,\"56\":2}}],[\"let\",{\"1\":{\"42\":1,\"44\":4,\"47\":1,\"50\":1,\"51\":1,\"52\":2,\"53\":2,\"55\":1,\"56\":1,\"59\":1}}],[\"limitto\",{\"1\":{\"35\":1}}],[\"lowercase\",{\"1\":{\"35\":1}}],[\"load\",{\"1\":{\"31\":2}}],[\"loadchildren\",{\"1\":{\"31\":3}}],[\"logo\",{\"1\":{\"42\":2,\"43\":4}}],[\"log\",{\"1\":{\"29\":2,\"43\":2,\"44\":6,\"47\":1,\"59\":1}}],[\"found\",{\"1\":{\"61\":1}}],[\"for优先级不同了\",{\"1\":{\"45\":1,\"58\":1}}],[\"for\",{\"1\":{\"44\":1}}],[\"forms\",{\"1\":{\"38\":2}}],[\"forchild\",{\"1\":{\"31\":1}}],[\"forroot\",{\"1\":{\"31\":1}}],[\"false\",{\"1\":{\"55\":1,\"56\":1}}],[\"flex\",{\"1\":{\"55\":2,\"56\":1}}],[\"from\",{\"1\":{\"42\":1,\"47\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":3,\"56\":1,\"59\":1}}],[\"filter\",{\"1\":{\"35\":1}}],[\"列举一下angular中的filter类型\",{\"0\":{\"35\":1}}],[\"路由\",{\"1\":{\"34\":1}}],[\"依赖注入\",{\"1\":{\"34\":1,\"48\":1,\"59\":1}}],[\"依赖注入了哪些类\",{\"1\":{\"26\":1}}],[\"服务\",{\"1\":{\"34\":1}}],[\"服务器上的\",{\"1\":{\"21\":1}}],[\"服务器用另一个资源响应\",{\"1\":{\"18\":1}}],[\"服务器返回资源\",{\"1\":{\"18\":1}}],[\"指令\",{\"1\":{\"34\":1}}],[\"指令分类\",{\"0\":{\"8\":1}}],[\"元数据\",{\"1\":{\"34\":1}}],[\"支持依赖注入\",{\"1\":{\"33\":1}}],[\"支持双向数据绑定\",{\"1\":{\"33\":1}}],[\"强大的功能比如动画和事件处理\",{\"1\":{\"33\":1}}],[\"优秀的社区支持\",{\"1\":{\"33\":1}}],[\"我在小程序的分享功能会用到\",{\"1\":{\"48\":1,\"59\":1}}],[\"我会考虑延迟加载而不是完全捆绑的应用程序\",{\"1\":{\"32\":1}}],[\"我们可以知道\",{\"1\":{\"43\":1}}],[\"我们将相同的内容绑定到模板\",{\"1\":{\"20\":1}}],[\"我们使用一个临时属性来保存内容\",{\"1\":{\"20\":1}}],[\"我们也只维护一个页面\",{\"1\":{\"18\":1}}],[\"如果大家还知道其他api不同点\",{\"1\":{\"58\":1}}],[\"如果层级过多传递麻烦\",{\"1\":{\"48\":1,\"59\":1}}],[\"如果看到有改变\",{\"1\":{\"36\":1}}],[\"如果应用程序较大时\",{\"1\":{\"32\":1}}],[\"如异步请求等\",{\"1\":{\"30\":1}}],[\"所有dependencies\",{\"1\":{\"32\":1}}],[\"所以需要sum\",{\"1\":{\"50\":1}}],[\"所以数据的赋值就要在nexttick进行\",{\"1\":{\"48\":1,\"59\":1}}],[\"所以是异步执行的\",{\"1\":{\"48\":1,\"59\":1}}],[\"所以使用\",{\"1\":{\"48\":1,\"59\":1}}],[\"所以可以使用懒加载\",{\"1\":{\"31\":1}}],[\"所以可以在index\",{\"1\":{\"28\":1}}],[\"所以既然ngonchanges是输入属性发生变化的时候调用\",{\"1\":{\"30\":1}}],[\"所以从angular的生命周期看\",{\"1\":{\"30\":1}}],[\"所以这个目录就是根目录\",{\"1\":{\"28\":1}}],[\"确保应用中已经移除了不使用的第三方库\",{\"1\":{\"32\":1}}],[\"确保应用程序不存在不必要的import语句\",{\"1\":{\"32\":1}}],[\"确保应用程序已经经过了捆绑\",{\"1\":{\"32\":1}}],[\"考虑aot编译\",{\"1\":{\"32\":1}}],[\"routing\",{\"1\":{\"34\":1}}],[\"routes\",{\"1\":{\"31\":2}}],[\"routermodule\",{\"1\":{\"31\":2}}],[\"routeroutlet\",{\"0\":{\"15\":1}}],[\"router\",{\"0\":{\"13\":1},\"1\":{\"13\":1,\"15\":1}}],[\"relative\",{\"1\":{\"55\":1,\"56\":1}}],[\"red\",{\"1\":{\"55\":1}}],[\"redirectto\",{\"1\":{\"31\":1}}],[\"ref\",{\"0\":{\"50\":1},\"1\":{\"48\":1,\"50\":2,\"53\":1,\"55\":2,\"56\":2,\"59\":2}}],[\"reflect\",{\"1\":{\"44\":2}}],[\"receiver\",{\"1\":{\"44\":4}}],[\"return\",{\"1\":{\"43\":2,\"44\":3}}],[\"reactive\",{\"0\":{\"51\":1},\"1\":{\"38\":1,\"42\":2,\"48\":1,\"51\":2,\"52\":1,\"53\":2,\"59\":2}}],[\"restful\",{\"1\":{\"33\":1}}],[\"知识点\",{\"1\":{\"31\":1}}],[\"再去加载\",{\"1\":{\"31\":1}}],[\"子模块不加载\",{\"1\":{\"31\":1}}],[\"子组件使用setup的形式\",{\"1\":{\"48\":1,\"59\":1}}],[\"子组件传值给父组件\",{\"1\":{\"9\":1}}],[\"子组件中使用事件发射器\",{\"1\":{\"9\":1}}],[\"子组件中使用\",{\"1\":{\"9\":2}}],[\"懒加载\",{\"1\":{\"31\":1}}],[\"启动速度慢\",{\"1\":{\"31\":1}}],[\"启动angular\",{\"1\":{\"22\":1}}],[\"导致加载缓慢\",{\"1\":{\"31\":1}}],[\"默认情况下\",{\"1\":{\"31\":1}}],[\"变量初始化等\",{\"1\":{\"30\":1}}],[\"一个用户拥有某些权限\",{\"1\":{\"48\":1,\"59\":1}}],[\"一\",{\"0\":{\"41\":1,\"50\":1,\"55\":1}}],[\"一般在constructor中进行一些简单的初始化操作\",{\"1\":{\"30\":1}}],[\"一旦jwt返回给给客户端\",{\"1\":{\"21\":1}}],[\"中不适合进行任何和组件通信类似的复杂操作\",{\"1\":{\"30\":1}}],[\"中的值\",{\"1\":{\"16\":1}}],[\"第一次显示数据绑定和设置指令\",{\"1\":{\"30\":1}}],[\"第一次调用ngdocheck\",{\"1\":{\"7\":1}}],[\"构造函数会被调用\",{\"1\":{\"30\":1}}],[\"x\",{\"1\":{\"29\":2}}],[\"观察者用来接收可观察者发送过来的消息\",{\"1\":{\"29\":1}}],[\"观察者\",{\"1\":{\"29\":1}}],[\"作用域\",{\"1\":{\"48\":1,\"59\":1}}],[\"作用\",{\"1\":{\"29\":1}}],[\"作为生产者和观察者之间的桥梁\",{\"1\":{\"29\":1}}],[\"作为参数\",{\"1\":{\"29\":1}}],[\"作为组件\",{\"1\":{\"28\":1}}],[\"函数\",{\"1\":{\"29\":1}}],[\"uglify和tree\",{\"1\":{\"32\":1}}],[\"unsubscribe\",{\"1\":{\"29\":1}}],[\"used<\",{\"1\":{\"12\":1}}],[\"返回\",{\"1\":{\"29\":1}}],[\"包含next\",{\"1\":{\"29\":1}}],[\"包括当前值和上一个属性值\",{\"1\":{\"7\":1}}],[\"接受一个observer对象\",{\"1\":{\"29\":1}}],[\"接受一个observer作为参数然后返回unsubscribe函数\",{\"1\":{\"29\":1}}],[\"特征\",{\"1\":{\"29\":1}}],[\"可以把盒子传送到body中\",{\"1\":{\"57\":1,\"59\":1}}],[\"可以添加生命周期\",{\"1\":{\"48\":1,\"59\":1}}],[\"可以添加自定义的directive\",{\"1\":{\"33\":1}}],[\"可以传递0\",{\"1\":{\"19\":1}}],[\"可观察者\",{\"1\":{\"29\":1}}],[\"加载应用会失败\",{\"1\":{\"28\":1}}],[\"加载css类\",{\"1\":{\"25\":1}}],[\"的比较\",{\"0\":{\"44\":1}}],[\"的异同点\",{\"0\":{\"39\":1}}],[\"的特点\",{\"1\":{\"38\":2}}],[\"的讲就是进入主模块之后\",{\"1\":{\"31\":1}}],[\"的本质区别\",{\"0\":{\"30\":1}}],[\"的顶部添加\",{\"1\":{\"28\":1}}],[\"的使用\",{\"0\":{\"13\":1}}],[\"开发期间\",{\"1\":{\"28\":1}}],[\"标签的作用\",{\"0\":{\"28\":1}}],[\"设置了\",{\"1\":{\"44\":3}}],[\"设置的视图中获取匹配的元素\",{\"1\":{\"39\":1}}],[\"设置base\",{\"0\":{\"28\":1}}],[\"设置css样式\",{\"1\":{\"25\":1}}],[\"margin\",{\"1\":{\"55\":2,\"56\":2}}],[\"markraw\",{\"1\":{\"48\":1,\"59\":1}}],[\"mo\",{\"1\":{\"55\":2,\"56\":2}}],[\"model\",{\"1\":{\"37\":2}}],[\"modules\",{\"1\":{\"34\":1}}],[\"module\",{\"1\":{\"31\":2}}],[\"module声明了哪些模块可以被其他模块使用\",{\"1\":{\"26\":1}}],[\"module不会控制视图\",{\"1\":{\"26\":1}}],[\"module是包括一个或多个组件\",{\"1\":{\"26\":1}}],[\"mixin\",{\"1\":{\"48\":1,\"59\":1}}],[\"methods\",{\"1\":{\"43\":2}}],[\"metadata\",{\"1\":{\"34\":1}}],[\"myelement\",{\"1\":{\"27\":1}}],[\"来定义数据的和vue2的data类似\",{\"1\":{\"48\":1,\"59\":1}}],[\"来初始化操作\",{\"1\":{\"30\":1}}],[\"来操作dom元素\",{\"1\":{\"27\":1}}],[\"来自其他html的样式不会传播到组件\",{\"1\":{\"14\":1}}],[\"怎样在组件中选择一个元素\",{\"0\":{\"27\":1}}],[\"使app实现模块化\",{\"1\":{\"26\":1}}],[\"使用hooks去管理维护代码\",{\"1\":{\"46\":1,\"60\":1}}],[\"使用方便\",{\"1\":{\"38\":1}}],[\"使用mvc模式\",{\"1\":{\"33\":1}}],[\"使用angular的好处\",{\"0\":{\"33\":1}}],[\"使用loadchildren配置路由\",{\"1\":{\"31\":1}}],[\"使用场景\",{\"1\":{\"30\":1,\"48\":2,\"59\":2}}],[\"使用在class中\",{\"1\":{\"30\":1}}],[\"使用teleport传送门代码示例及效果演示\",{\"0\":{\"56\":1}}],[\"使用tsc编译\",{\"1\":{\"22\":1}}],[\"使用typescript开发\",{\"1\":{\"22\":1}}],[\"使用\",{\"1\":{\"9\":1,\"29\":1}}],[\"使用指南\",{\"2\":{\"1\":1,\"3\":1,\"5\":1}}],[\"模版\",{\"1\":{\"34\":1}}],[\"模块\",{\"1\":{\"34\":1}}],[\"模块来管理组件\",{\"1\":{\"26\":1}}],[\"模板驱动表单\",{\"1\":{\"38\":1}}],[\"模板驱动表单和\",{\"0\":{\"38\":1}}],[\"模板的基地址\",{\"1\":{\"28\":1}}],[\"模板语法\",{\"1\":{\"10\":3}}],[\"以及启动的component\",{\"1\":{\"26\":1}}],[\"以防内存泄露\",{\"1\":{\"7\":1}}],[\"show\",{\"1\":{\"55\":3,\"56\":3}}],[\"shaking\",{\"1\":{\"32\":1}}],[\"sum\",{\"1\":{\"50\":3}}],[\"subscribe\",{\"1\":{\"29\":1}}],[\"slot\",{\"1\":{\"48\":1,\"59\":1}}],[\"script>\",{\"1\":{\"42\":1,\"43\":2,\"44\":2,\"46\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":2,\"56\":1,\"59\":1,\"60\":1}}],[\"sex\",{\"1\":{\"51\":1,\"52\":1,\"53\":1}}],[\"setup形式\",{\"1\":{\"46\":1,\"59\":1,\"60\":1}}],[\"setup>\",{\"1\":{\"42\":1,\"46\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":2,\"56\":1,\"59\":1,\"60\":1}}],[\"set\",{\"1\":{\"44\":3}}],[\"services\",{\"1\":{\"34\":1}}],[\"service和有效验证\",{\"1\":{\"33\":1}}],[\"src=\",{\"1\":{\"42\":1,\"43\":2}}],[\"style=\",{\"1\":{\"55\":2,\"56\":1}}],[\"style>\",{\"1\":{\"55\":2,\"56\":1}}],[\"style\",{\"1\":{\"25\":1}}],[\"style的区别\",{\"0\":{\"25\":1}}],[\"somethingchanged\",{\"1\":{\"9\":2}}],[\"createapp\",{\"1\":{\"48\":1,\"59\":1}}],[\"click=\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1}}],[\"class=\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":3,\"56\":2}}],[\"class\",{\"0\":{\"25\":1},\"1\":{\"25\":1}}],[\"c\",{\"1\":{\"42\":2,\"43\":5,\"44\":3}}],[\"check是比较新的数据跟老的数据的差别\",{\"1\":{\"36\":1}}],[\"check是怎么回事\",{\"0\":{\"36\":1}}],[\"childnew\",{\"1\":{\"31\":1}}],[\"childrennewloadmodule\",{\"1\":{\"31\":1}}],[\"childrenloadmodule\",{\"1\":{\"31\":1}}],[\"children\",{\"1\":{\"31\":4}}],[\"child\",{\"1\":{\"31\":2}}],[\"currency\",{\"1\":{\"35\":1}}],[\"computed\",{\"1\":{\"48\":1,\"59\":1}}],[\"complete\",{\"1\":{\"29\":2}}],[\"complete方法的对象\",{\"1\":{\"29\":1}}],[\"components\",{\"1\":{\"34\":1,\"55\":2}}],[\"component控制视图\",{\"1\":{\"26\":1}}],[\"component和module的区别\",{\"0\":{\"26\":1}}],[\"component\",{\"1\":{\"13\":1,\"16\":1}}],[\"component可创建一个view\",{\"1\":{\"11\":1}}],[\"component是可重复使用的组件\",{\"1\":{\"11\":1}}],[\"component是组件化思想\",{\"1\":{\"11\":1}}],[\"component修饰\",{\"1\":{\"11\":1}}],[\"component使用注解\",{\"1\":{\"11\":1}}],[\"config\",{\"1\":{\"47\":1,\"48\":1,\"59\":2}}],[\"const\",{\"1\":{\"31\":1,\"42\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1}}],[\"constructor是执行在先的\",{\"1\":{\"30\":1}}],[\"constructor表示构造函数\",{\"1\":{\"30\":1}}],[\"constructor\",{\"0\":{\"30\":1},\"1\":{\"27\":1,\"30\":2}}],[\"console\",{\"1\":{\"29\":3,\"43\":2,\"44\":6,\"47\":1,\"59\":1}}],[\"content\",{\"1\":{\"39\":2}}],[\"contentchildren\",{\"1\":{\"39\":1}}],[\"contentchild\",{\"0\":{\"39\":1},\"1\":{\"39\":2}}],[\"content>\",{\"1\":{\"12\":1}}],[\"content>tag\",{\"1\":{\"12\":1}}],[\"content指令\",{\"0\":{\"12\":1}}],[\"此功能用于更改模板上的输出\",{\"1\":{\"24\":1}}],[\"它还包含有浏览器的属性\",{\"1\":{\"37\":1}}],[\"它还可以相应地更改日期格式\",{\"1\":{\"24\":1}}],[\"它用于具有复杂数据流的单页应用程序\",{\"1\":{\"23\":1}}],[\"它是一个帮助我们维护应用程序状态的库\",{\"1\":{\"23\":1}}],[\"它有关于当前用户的一些信息或属性\",{\"1\":{\"21\":1}}],[\"什么是pipes\",{\"0\":{\"24\":1}}],[\"什么是redux\",{\"0\":{\"23\":1}}],[\"什么是viewencapsulation\",{\"0\":{\"14\":1}}],[\"否则jit唯一的优势就是能用来做在线\",{\"1\":{\"22\":1}}],[\"除非确实有动态组件的需求\",{\"1\":{\"22\":1}}],[\"编译时间短\",{\"1\":{\"22\":1}}],[\"需要在页面居中位置展示\",{\"1\":{\"57\":1,\"59\":1}}],[\"需要用defineprops接收\",{\"1\":{\"48\":1,\"59\":1}}],[\"需要下载的angular框架体积更小\",{\"1\":{\"22\":1}}],[\"需要的异步请求更少\",{\"1\":{\"22\":1}}],[\"渲染得更快\",{\"1\":{\"22\":1}}],[\"渲染页面\",{\"1\":{\"22\":1}}],[\"页面渲染\",{\"1\":{\"22\":1}}],[\"页面占位符\",{\"1\":{\"15\":1}}],[\"下载代码\",{\"1\":{\"22\":1}}],[\"流程\",{\"1\":{\"22\":1}}],[\"浏览器下载js代码\",{\"1\":{\"22\":1}}],[\"部署好之后\",{\"1\":{\"22\":1}}],[\"部署\",{\"1\":{\"22\":1}}],[\"压缩\",{\"1\":{\"22\":1}}],[\"大概的开发流程\",{\"1\":{\"22\":1}}],[\"生成typescript代码\",{\"1\":{\"22\":1}}],[\"生成的是ts代码\",{\"1\":{\"22\":1}}],[\"生成的js代码\",{\"1\":{\"22\":1}}],[\"生命周期的顺序\",{\"1\":{\"7\":1}}],[\"生命周期钩子中才能成功获取通过\",{\"1\":{\"39\":2}}],[\"生命周期钩子\",{\"0\":{\"7\":1}}],[\"和dev\",{\"1\":{\"32\":1}}],[\"和\",{\"0\":{\"25\":1,\"30\":1,\"41\":1},\"1\":{\"45\":1,\"58\":1}}],[\"和jit编译\",{\"0\":{\"22\":1}}],[\"和promises的区别\",{\"0\":{\"19\":1}}],[\"她被授权访问某些数据\",{\"1\":{\"21\":1}}],[\"他\",{\"1\":{\"21\":1}}],[\"经过身份验证或真正的用户不能访问所有内容\",{\"1\":{\"21\":1}}],[\"登录成功后\",{\"1\":{\"21\":1}}],[\"授权\",{\"1\":{\"21\":1}}],[\"javascript\",{\"1\":{\"44\":2}}],[\"json\",{\"1\":{\"35\":1}}],[\"jsp\",{\"1\":{\"18\":1}}],[\"jit优势\",{\"1\":{\"22\":1}}],[\"jit\",{\"1\":{\"22\":1}}],[\"just\",{\"1\":{\"22\":1}}],[\"jwt是一个json对象\",{\"1\":{\"21\":1}}],[\"jwt\",{\"1\":{\"21\":1}}],[\"to=\",{\"1\":{\"56\":1}}],[\"top\",{\"1\":{\"55\":2,\"56\":2}}],[\"torefs\",{\"0\":{\"53\":1},\"1\":{\"53\":2,\"59\":1}}],[\"toref\",{\"0\":{\"52\":1},\"1\":{\"52\":2,\"53\":1,\"59\":1}}],[\"token\",{\"1\":{\"21\":1}}],[\"target\",{\"1\":{\"44\":4}}],[\"this\",{\"1\":{\"43\":6}}],[\"type=\",{\"1\":{\"44\":2}}],[\"type\",{\"1\":{\"39\":1}}],[\"typescript编译车javascript\",{\"1\":{\"22\":1}}],[\"typescript开发angular应用\",{\"1\":{\"22\":1}}],[\"teleport组件是一个传送门\",{\"1\":{\"57\":1,\"59\":1}}],[\"teleport组件及其使用场景\",{\"0\":{\"54\":1}}],[\"teleport>\",{\"1\":{\"56\":1}}],[\"text\",{\"1\":{\"44\":2}}],[\"template>\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":3,\"56\":1}}],[\"template\",{\"1\":{\"38\":1}}],[\"templates\",{\"1\":{\"34\":1}}],[\"test>\",{\"1\":{\"12\":1}}],[\"test><\",{\"1\":{\"12\":1}}],[\"time\",{\"1\":{\"22\":2}}],[\"认证api\",{\"1\":{\"21\":1}}],[\"认证\",{\"1\":{\"21\":1}}],[\"通过\",{\"1\":{\"38\":1}}],[\"通过对应的api来访问里面的数据\",{\"1\":{\"37\":1}}],[\"通过使用asyncpipe\",{\"1\":{\"20\":1}}],[\"通俗\",{\"1\":{\"31\":1}}],[\"通常会在index\",{\"1\":{\"28\":1}}],[\"通常用于移除事件监听\",{\"1\":{\"7\":1}}],[\"稍后\",{\"1\":{\"20\":1}}],[\"并且ngoninit是在ngonchanges执行之后才调用\",{\"1\":{\"30\":1}}],[\"并且为每个事件回调\",{\"1\":{\"19\":1}}],[\"并返回一种方法来解除生产者和观察者之间的关系\",{\"1\":{\"29\":1}}],[\"并在发生\",{\"1\":{\"7\":1}}],[\"意思是一旦创建\",{\"1\":{\"19\":1}}],[\"意思是在subsciption之前什么都不会发生\",{\"1\":{\"19\":1}}],[\"​\",{\"1\":{\"19\":3,\"22\":26,\"29\":6}}],[\"是window\",{\"1\":{\"37\":1}}],[\"是angular中oninit钩子的实现\",{\"1\":{\"30\":1}}],[\"是一个函数\",{\"1\":{\"29\":1}}],[\"是惰性的\",{\"1\":{\"19\":1}}],[\"是来自于ts\",{\"1\":{\"16\":1}}],[\"orange\",{\"1\":{\"55\":1,\"56\":1}}],[\"orderby\",{\"1\":{\"35\":1}}],[\"obj\",{\"1\":{\"42\":6,\"43\":15,\"51\":3,\"52\":3,\"53\":2}}],[\"object的子成员\",{\"1\":{\"37\":1}}],[\"object\",{\"0\":{\"44\":1},\"1\":{\"37\":2,\"44\":2,\"45\":1,\"58\":1}}],[\"observer\",{\"0\":{\"29\":1},\"1\":{\"29\":6}}],[\"observable\",{\"0\":{\"29\":1},\"1\":{\"29\":2}}],[\"observable可取消\",{\"1\":{\"19\":1}}],[\"observable是一个stream\",{\"1\":{\"19\":1}}],[\"observables\",{\"0\":{\"19\":1},\"1\":{\"19\":1}}],[\"of\",{\"1\":{\"22\":1}}],[\"outlet>\",{\"1\":{\"15\":1}}],[\"outlet><\",{\"1\":{\"15\":1}}],[\"output\",{\"1\":{\"9\":2}}],[\"即可实现数据与试图更新\",{\"1\":{\"43\":1}}],[\"即使后添加的也可以劫持到\",{\"1\":{\"44\":1,\"45\":1,\"58\":1}}],[\"即使vue3中\",{\"1\":{\"42\":1}}],[\"即使url不断变化\",{\"1\":{\"18\":1}}],[\"即template或templateurl\",{\"1\":{\"11\":1}}],[\"而在vue2中\",{\"1\":{\"43\":1}}],[\"而在spa技术中\",{\"1\":{\"18\":1}}],[\"而constructor是在组件实例化的时候就调用了\",{\"1\":{\"30\":1}}],[\"而不需要临时属性\",{\"1\":{\"20\":1}}],[\"而directive没有\",{\"1\":{\"11\":1}}],[\"而directive用来在已经存在的dom元素上实现一些行为\",{\"1\":{\"11\":1}}],[\"或者多个事件\",{\"1\":{\"19\":1}}],[\"或者是重新加载使用了大量时间\",{\"1\":{\"18\":1}}],[\"或html页面\",{\"1\":{\"18\":1}}],[\"问题就在于请求\",{\"1\":{\"18\":1}}],[\"客户端和服务器的通讯非常便利\",{\"1\":{\"33\":1}}],[\"客户端或用户将被该jwt所标记\",{\"1\":{\"21\":1}}],[\"客户端再次请求另一个页面\",{\"1\":{\"18\":1}}],[\"客户端请求一个web页面\",{\"1\":{\"18\":1}}],[\"height\",{\"1\":{\"55\":2,\"56\":1}}],[\"hooks\",{\"1\":{\"46\":1,\"59\":2,\"60\":1}}],[\"homeview\",{\"1\":{\"43\":2}}],[\"home\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":2}}],[\"href\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"html所在目录中启动服务器\",{\"1\":{\"28\":1}}],[\"html\",{\"1\":{\"18\":2,\"26\":2,\"28\":1}}],[\"h1>\",{\"1\":{\"16\":1}}],[\"单页面应用和传统的web技术有什么不同\",{\"0\":{\"18\":1}}],[\"属性绑定\",{\"1\":{\"17\":1}}],[\"属性指令\",{\"1\":{\"8\":1}}],[\"数据更新了\",{\"1\":{\"43\":1}}],[\"数据更新了视图没更新\",{\"1\":{\"43\":2}}],[\"数据引用\",{\"0\":{\"16\":1}}],[\"数据绑定\",{\"1\":{\"10\":2,\"34\":1}}],[\"决定component显示在哪里\",{\"1\":{\"15\":1}}],[\"决定组件中定义的样式是否会影响整个应用程序\",{\"1\":{\"14\":1}}],[\"<teleport\",{\"1\":{\"56\":1}}],[\"<template>\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":3,\"56\":1}}],[\"<style>\",{\"1\":{\"55\":2,\"56\":1}}],[\"<script>\",{\"1\":{\"43\":2}}],[\"<script\",{\"1\":{\"42\":1,\"44\":2,\"46\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":2,\"56\":1,\"59\":1,\"60\":1}}],[\"<b\",{\"1\":{\"55\":1}}],[\"<button\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1}}],[\"<a\",{\"1\":{\"55\":1}}],[\"<hr\",{\"1\":{\"42\":1,\"43\":2}}],[\"<h1>\",{\"1\":{\"16\":1}}],[\"<img\",{\"1\":{\"42\":1,\"43\":2}}],[\"<div\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":4,\"56\":2}}],[\"<\",{\"1\":{\"16\":1,\"42\":3,\"43\":6,\"44\":2,\"46\":1,\"50\":3,\"51\":3,\"52\":3,\"53\":3,\"55\":10,\"56\":5,\"59\":1,\"60\":1}}],[\"<router\",{\"1\":{\"15\":1}}],[\"<p>this\",{\"1\":{\"12\":1}}],[\"9\",{\"0\":{\"15\":1},\"1\":{\"34\":1,\"48\":1,\"59\":1}}],[\"样式从其他html传播到组件\",{\"1\":{\"14\":1}}],[\"8\",{\"0\":{\"14\":1},\"1\":{\"34\":1,\"48\":1,\"59\":1}}],[\"700px\",{\"1\":{\"55\":1}}],[\"7\",{\"0\":{\"13\":1},\"1\":{\"34\":1,\"48\":1,\"58\":1,\"59\":1}}],[\"这种情况下就可以使用<ng\",{\"1\":{\"12\":1}}],[\"例如在<app\",{\"1\":{\"12\":1}}],[\"position\",{\"1\":{\"55\":2,\"56\":2}}],[\"png\",{\"1\":{\"42\":1,\"43\":2}}],[\"provide\",{\"1\":{\"48\":1,\"59\":1}}],[\"propkey\",{\"1\":{\"44\":4}}],[\"proxy代理\",{\"1\":{\"48\":1,\"59\":1}}],[\"proxy不需要\",{\"1\":{\"45\":1,\"58\":1}}],[\"proxy\",{\"0\":{\"44\":1},\"1\":{\"44\":2,\"45\":1,\"58\":1}}],[\"projection\",{\"1\":{\"39\":1}}],[\"promise或observable可以直接在模板中使用\",{\"1\":{\"20\":1}}],[\"promise不可取消\",{\"1\":{\"19\":1}}],[\"promise只处理一个事件\",{\"1\":{\"19\":1}}],[\"promise是eager的\",{\"1\":{\"19\":1}}],[\"path\",{\"1\":{\"31\":3}}],[\"paragraph<\",{\"1\":{\"12\":1}}],[\"p>那我们如果想在angular的标签之间添加内容呢\",{\"1\":{\"12\":1}}],[\"absolute\",{\"1\":{\"55\":1,\"56\":1}}],[\"age\",{\"1\":{\"51\":1,\"52\":1,\"53\":2}}],[\"addbtn\",{\"1\":{\"42\":2,\"43\":4}}],[\"alt=\",{\"1\":{\"42\":1,\"43\":2}}],[\"aot优势\",{\"1\":{\"22\":1}}],[\"aot\",{\"1\":{\"22\":1}}],[\"aot编译\",{\"0\":{\"22\":1}}],[\"ahead\",{\"1\":{\"22\":1}}],[\"authorization\",{\"1\":{\"21\":1}}],[\"authorization的区别\",{\"0\":{\"21\":1}}],[\"authentication\",{\"0\":{\"21\":1},\"1\":{\"21\":1}}],[\"any\",{\"1\":{\"39\":1}}],[\"and\",{\"0\":{\"21\":1}}],[\"angular的核心部件有哪些\",{\"0\":{\"34\":1}}],[\"angular的懒加载\",{\"0\":{\"31\":1}}],[\"angular的双向数据绑定就是\",{\"1\":{\"10\":1}}],[\"angular路由器使用base\",{\"1\":{\"28\":1}}],[\"angular启动\",{\"1\":{\"22\":1}}],[\"angular\",{\"0\":{\"62\":1},\"1\":{\"7\":2}}],[\"angular面试\",{\"1\":{\"7\":1}}],[\"angular面试题及答案\",{\"1\":{\"7\":1}}],[\"angular面试题汇总\",{\"0\":{\"6\":1}}],[\"assets\",{\"1\":{\"42\":1,\"43\":2}}],[\"asyncpipe\",{\"0\":{\"20\":1}}],[\"asp\",{\"1\":{\"18\":1}}],[\"appcontext\",{\"1\":{\"47\":1,\"59\":1}}],[\"app\",{\"1\":{\"12\":1,\"47\":3,\"48\":1,\"59\":4}}],[\"a\",{\"1\":{\"12\":1,\"29\":3,\"42\":2,\"43\":4,\"44\":2,\"55\":2}}],[\"if=\",{\"1\":{\"55\":1,\"56\":1}}],[\"if和v\",{\"1\":{\"45\":1,\"58\":1}}],[\"import\",{\"1\":{\"42\":1,\"47\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":3,\"56\":1,\"59\":1}}],[\"inject\",{\"1\":{\"48\":1,\"59\":1}}],[\"injection\",{\"1\":{\"34\":1}}],[\"in\",{\"1\":{\"22\":1,\"44\":1}}],[\"index\",{\"1\":{\"18\":1,\"55\":1}}],[\"input\",{\"1\":{\"9\":1}}],[\"is\",{\"1\":{\"12\":2}}],[\"在vue3中\",{\"1\":{\"43\":1}}],[\"在父组件的\",{\"1\":{\"39\":2}}],[\"在初始化的时候所有路由都会加载\",{\"1\":{\"31\":1}}],[\"在constructor中是取不到输入属性的值的\",{\"1\":{\"30\":1}}],[\"在es6中\",{\"1\":{\"30\":1}}],[\"在组件的constructor中引入\",{\"1\":{\"27\":1}}],[\"在浏览器中开始jit的编译过程\",{\"1\":{\"22\":1}}],[\"在浏览器中进行\",{\"1\":{\"22\":1}}],[\"在服务器端验证凭据并返回json\",{\"1\":{\"21\":1}}],[\"在传统的web技术中\",{\"1\":{\"18\":1}}],[\"在标记之间可以添加内容\",{\"1\":{\"12\":1}}],[\"在angular\",{\"1\":{\"30\":1}}],[\"在angular中有三种方法可以做到这一点\",{\"1\":{\"14\":1}}],[\"在angular每次销毁组件或指令之前调用\",{\"1\":{\"7\":1}}],[\"在angular第一次显示展示组件的绑定属性后调用\",{\"1\":{\"7\":1}}],[\"像p标签或者h1标签\",{\"1\":{\"12\":1}}],[\"6\",{\"0\":{\"12\":1},\"1\":{\"32\":1,\"34\":1,\"48\":1,\"58\":1,\"59\":1}}],[\"display\",{\"1\":{\"55\":1}}],[\"div>\",{\"1\":{\"42\":1,\"43\":2,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":4,\"56\":2}}],[\"dirty\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"directives\",{\"1\":{\"34\":1}}],[\"directive\",{\"1\":{\"12\":1,\"48\":1,\"59\":1}}],[\"directive是可重复使用的行为\",{\"1\":{\"11\":1}}],[\"directive修饰\",{\"1\":{\"11\":1}}],[\"directive使用注解\",{\"1\":{\"11\":1}}],[\"driven\",{\"1\":{\"38\":1}}],[\"dom\",{\"1\":{\"48\":1,\"59\":1}}],[\"dom有w3c的标准\",{\"1\":{\"37\":1}}],[\"dom用来操作html文档\",{\"1\":{\"37\":1}}],[\"dom是一棵树结构\",{\"1\":{\"37\":1}}],[\"dom是document\",{\"1\":{\"37\":1}}],[\"dom代表的是网页的内容\",{\"1\":{\"37\":1}}],[\"dom和bom的区别是什么\",{\"0\":{\"37\":1}}],[\"date\",{\"1\":{\"35\":1}}],[\"data\",{\"1\":{\"10\":2,\"34\":1,\"43\":2,\"44\":6}}],[\"defineemits\",{\"1\":{\"48\":1,\"59\":1}}],[\"defineprops\",{\"1\":{\"48\":1,\"59\":1}}],[\"defineproperty\",{\"0\":{\"44\":1},\"1\":{\"44\":2,\"45\":1,\"58\":1}}],[\"default\",{\"1\":{\"43\":2}}],[\"dependency\",{\"1\":{\"34\":1}}],[\"dependencies都是明确分离的\",{\"1\":{\"32\":1}}],[\"demo和开发调试\",{\"1\":{\"22\":1}}],[\"50\",{\"1\":{\"55\":2,\"56\":2}}],[\"5\",{\"0\":{\"11\":1},\"1\":{\"22\":1,\"32\":1,\"34\":1,\"45\":1,\"48\":1,\"58\":1,\"59\":1}}],[\"+\",{\"1\":{\"10\":1,\"29\":2}}],[\"事件绑定\",{\"1\":{\"10\":2,\"17\":1}}],[\"事件传递的方式\",{\"1\":{\"9\":1}}],[\"404\",{\"1\":{\"61\":1}}],[\"4\",{\"0\":{\"10\":1},\"1\":{\"22\":1,\"32\":1,\"34\":1,\"45\":1,\"48\":1,\"58\":1,\"59\":1}}],[\"v\",{\"1\":{\"45\":1,\"55\":1,\"56\":1,\"58\":1}}],[\"vue代码\",{\"1\":{\"55\":1}}],[\"vue\",{\"0\":{\"64\":1},\"1\":{\"42\":2,\"43\":2,\"44\":6,\"47\":1,\"48\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1,\"59\":2}}],[\"vue3常用的响应式数据类型\",{\"0\":{\"49\":1}}],[\"vue3常用api有哪些\",{\"0\":{\"48\":1},\"1\":{\"59\":1}}],[\"vue3不需要深度监听\",{\"1\":{\"48\":1,\"59\":1}}],[\"vue3如果用setup写如何获取类似于vue2中的this\",{\"0\":{\"47\":1},\"1\":{\"59\":1}}],[\"vue3如果用setup写怎么组织代码\",{\"0\":{\"46\":1,\"59\":1,\"60\":1}}],[\"vue3可以向下兼容\",{\"1\":{\"45\":1,\"58\":1}}],[\"vue3代码示例\",{\"0\":{\"42\":1}}],[\"vue3\",{\"0\":{\"41\":1,\"63\":1},\"1\":{\"45\":2,\"58\":2}}],[\"vue2是选项式api\",{\"1\":{\"45\":1,\"58\":1}}],[\"vue2代码使用$set方法\",{\"1\":{\"43\":1}}],[\"vue2项目中使用vue3的写法\",{\"1\":{\"43\":1}}],[\"vue2使用vue3写法代码示例\",{\"0\":{\"43\":1}}],[\"vue2\",{\"0\":{\"41\":1},\"1\":{\"45\":2,\"58\":2}}],[\"vue2和vue3区别\",{\"0\":{\"40\":1,\"58\":1}}],[\"var\",{\"1\":{\"16\":2,\"29\":1}}],[\"value=true\",{\"1\":{\"55\":1,\"56\":1}}],[\"value\",{\"1\":{\"9\":1,\"29\":1,\"44\":4,\"50\":2,\"53\":1}}],[\"viewchildren\",{\"1\":{\"39\":1}}],[\"viewchild\",{\"0\":{\"39\":1},\"1\":{\"39\":2}}],[\"viewchid父组件通过局部变量获取子组件的引用\",{\"1\":{\"9\":1}}],[\"viewencapsulation\",{\"1\":{\"14\":1}}],[\"view\",{\"1\":{\"10\":2}}],[\"export\",{\"1\":{\"43\":2}}],[\"err\",{\"1\":{\"29\":2}}],[\"error\",{\"1\":{\"29\":4}}],[\"elementref\",{\"1\":{\"27\":2}}],[\"emulated\",{\"1\":{\"14\":1}}],[\"emit\",{\"1\":{\"9\":1}}],[\"eventemitter\",{\"1\":{\"9\":1}}],[\"number\",{\"1\":{\"35\":1}}],[\"not\",{\"1\":{\"61\":1}}],[\"notification\",{\"1\":{\"29\":1}}],[\"none\",{\"1\":{\"14\":1}}],[\"nexttick返回一个pormise\",{\"1\":{\"48\":1,\"59\":1}}],[\"nexttick\",{\"1\":{\"48\":1,\"59\":1}}],[\"next\",{\"1\":{\"29\":2}}],[\"newload\",{\"1\":{\"31\":2}}],[\"new\",{\"1\":{\"9\":1,\"44\":2,\"45\":1,\"48\":1,\"58\":1,\"59\":1}}],[\"native\",{\"1\":{\"14\":1}}],[\"name\",{\"1\":{\"13\":1,\"43\":2,\"51\":2,\"52\":5,\"53\":4}}],[\"navigatethis\",{\"1\":{\"13\":1}}],[\"navigate\",{\"0\":{\"13\":1},\"1\":{\"13\":1}}],[\"ngmodel\",{\"1\":{\"38\":1}}],[\"ng\",{\"0\":{\"12\":1,\"25\":2},\"1\":{\"12\":1,\"25\":2,\"39\":1}}],[\"ngswitch\",{\"1\":{\"8\":1}}],[\"ngstyle\",{\"1\":{\"8\":1}}],[\"ngfor\",{\"1\":{\"8\":1}}],[\"ngif\",{\"1\":{\"8\":1}}],[\"ngclass\",{\"1\":{\"8\":1}}],[\"ngafterviewchecked\",{\"1\":{\"7\":1}}],[\"ngafterviewinit\",{\"1\":{\"7\":1,\"39\":1}}],[\"ngaftercontentchecked\",{\"1\":{\"7\":1}}],[\"ngaftercontentinit\",{\"1\":{\"7\":1,\"39\":1}}],[\"ngdocheck\",{\"1\":{\"7\":1}}],[\"ngondestroy\",{\"1\":{\"7\":1}}],[\"ngoninit可以用来初始化组件之间通信的\",{\"1\":{\"30\":1}}],[\"ngoninit\",{\"0\":{\"30\":1},\"1\":{\"7\":1,\"30\":3}}],[\"ngonchanges\",{\"1\":{\"7\":1}}],[\"==\",{\"1\":{\"46\":1,\"48\":2,\"59\":3,\"60\":1}}],[\"==>\",{\"1\":{\"42\":2,\"43\":4}}],[\"=>\",{\"1\":{\"10\":2,\"29\":3,\"42\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":1}}],[\"=\",{\"1\":{\"9\":1,\"29\":1,\"31\":1,\"42\":3,\"43\":2,\"44\":6,\"47\":1,\"50\":3,\"51\":3,\"52\":4,\"53\":4,\"55\":2,\"56\":2,\"59\":1}}],[\"父组件传递的值\",{\"1\":{\"48\":1,\"59\":1}}],[\"父组件中使用\",{\"1\":{\"9\":1}}],[\"父组件向子组件传递数据和传递方法\",{\"1\":{\"9\":1}}],[\"父子组件之间的数据传递\",{\"0\":{\"9\":1}}],[\"33\",{\"0\":{\"39\":1}}],[\"32\",{\"0\":{\"38\":1}}],[\"31\",{\"0\":{\"37\":1}}],[\"300px\",{\"1\":{\"55\":3,\"56\":2}}],[\"30\",{\"0\":{\"36\":1}}],[\"3\",{\"0\":{\"9\":1},\"1\":{\"22\":1,\"32\":1,\"34\":1,\"42\":1,\"43\":3,\"44\":2,\"45\":1,\"48\":2,\"58\":1,\"59\":2}}],[\"结构指令\",{\"1\":{\"8\":1}}],[\"继承于directive类\",{\"1\":{\"8\":1}}],[\"用来从模板视图中获取匹配的元素\",{\"1\":{\"39\":1}}],[\"用来从通过\",{\"1\":{\"39\":1}}],[\"用来初始化组件\",{\"1\":{\"30\":1}}],[\"用angular编译器对模板进行编译\",{\"1\":{\"22\":1}}],[\"用ngc编译\",{\"1\":{\"22\":1}}],[\"用户端\",{\"1\":{\"22\":1}}],[\"用户在浏览器端\",{\"1\":{\"22\":1}}],[\"用户未被授权访问其他人的数据\",{\"1\":{\"21\":1}}],[\"用户登录凭据传递给\",{\"1\":{\"21\":1}}],[\"用于子模块\",{\"1\":{\"31\":1}}],[\"用于主模块\",{\"1\":{\"31\":1}}],[\"用于取消订阅\",{\"1\":{\"29\":1}}],[\"用于动态添加或删除dom元素来改变dom布局\",{\"1\":{\"8\":1}}],[\"用于改变组件的外观或行为\",{\"1\":{\"8\":1}}],[\"用于构建ui组件\",{\"1\":{\"8\":1}}],[\"用途\",{\"1\":{\"7\":1}}],[\"组件b代码\",{\"1\":{\"55\":1}}],[\"组件a代码\",{\"1\":{\"55\":1}}],[\"组件不使用\",{\"0\":{\"55\":1}}],[\"组件的输入属性之后\",{\"1\":{\"30\":1}}],[\"组件之间以及组件和service之间互相交互给app提供功能\",{\"1\":{\"26\":1}}],[\"组件中定义的样式对所有组件都是可见的\",{\"1\":{\"14\":1}}],[\"组件和指令的区别\",{\"0\":{\"11\":1}}],[\"组件\",{\"1\":{\"8\":1,\"30\":1,\"34\":1}}],[\"29\",{\"0\":{\"35\":1}}],[\"28\",{\"0\":{\"34\":1}}],[\"27\",{\"0\":{\"33\":1}}],[\"26\",{\"0\":{\"32\":1}}],[\"25\",{\"0\":{\"31\":1}}],[\"24\",{\"0\":{\"30\":1}}],[\"23\",{\"0\":{\"29\":1}}],[\"22\",{\"0\":{\"28\":1}}],[\"21\",{\"0\":{\"27\":1}}],[\"200\",{\"1\":{\"50\":1}}],[\"20\",{\"0\":{\"26\":1}}],[\"2\",{\"0\":{\"8\":1},\"1\":{\"22\":1,\"32\":1,\"34\":1,\"42\":1,\"43\":2,\"44\":2,\"45\":1,\"48\":3,\"59\":3}}],[\"退订可观察对象\",{\"1\":{\"7\":1}}],[\"每次做完组件视图和子视图的变更检测之后调用\",{\"1\":{\"7\":1}}],[\"每次完成被投影组件内容的变更检测之后调用\",{\"1\":{\"7\":1}}],[\"初始化指令\",{\"1\":{\"30\":1}}],[\"初始化指令或组件\",{\"1\":{\"7\":1}}],[\"初始化完组件视图及其子视图或包含该指令的视图之后调用\",{\"1\":{\"7\":1}}],[\"只适用于组件\",{\"1\":{\"7\":3}}],[\"只调用一次\",{\"1\":{\"7\":1}}],[\"之后调用\",{\"1\":{\"7\":1}}],[\"当前组件使用setup形式\",{\"1\":{\"48\":1,\"59\":1}}],[\"当类被初始化之后\",{\"1\":{\"30\":1}}],[\"当没有配置base标签时\",{\"1\":{\"28\":1}}],[\"当observable或promise返回data时\",{\"1\":{\"20\":1}}],[\"当我们想路由到一个组件的时候使用router\",{\"1\":{\"13\":1}}],[\"当\",{\"1\":{\"7\":1}}],[\"当把内容投影进组件之后调用\",{\"1\":{\"7\":1}}],[\"当组件数据绑定的输入属性发生变化是触发\",{\"1\":{\"7\":1}}],[\"无法或不愿意自己检测的变化时作出反应\",{\"1\":{\"7\":1}}],[\"检测\",{\"1\":{\"7\":1}}],[\"该方法只会调用一次\",{\"1\":{\"7\":1}}],[\"该方法接收一个simplechanges对象\",{\"1\":{\"7\":1}}],[\"值得注意的是该方法仅限于对象的引用发生变化时才会触发\",{\"1\":{\"7\":1}}],[\"首次调用一定发生在ngoninit前\",{\"1\":{\"7\":1}}],[\"钩子方法\",{\"1\":{\"7\":1}}],[\"见下图\",{\"1\":{\"7\":1}}],[\"19\",{\"0\":{\"25\":1}}],[\"18\",{\"0\":{\"24\":1},\"1\":{\"51\":1,\"52\":1,\"53\":1}}],[\"17\",{\"0\":{\"23\":1}}],[\"16\",{\"0\":{\"22\":1}}],[\"150px\",{\"1\":{\"55\":2,\"56\":2}}],[\"15\",{\"0\":{\"21\":1}}],[\"14\",{\"0\":{\"20\":1}}],[\"13\",{\"0\":{\"19\":1},\"1\":{\"48\":1,\"59\":1}}],[\"12\",{\"0\":{\"18\":1},\"1\":{\"48\":1,\"59\":1}}],[\"11\",{\"0\":{\"17\":1},\"1\":{\"48\":1,\"59\":1}}],[\"10\",{\"0\":{\"16\":1},\"1\":{\"48\":1,\"50\":1,\"59\":1}}],[\"1\",{\"0\":{\"7\":1},\"1\":{\"19\":1,\"22\":1,\"32\":1,\"34\":1,\"42\":1,\"43\":2,\"44\":2,\"45\":1,\"48\":3,\"55\":1,\"56\":1,\"58\":1,\"59\":3}}],[\"前端客栈\",{\"0\":{\"4\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
