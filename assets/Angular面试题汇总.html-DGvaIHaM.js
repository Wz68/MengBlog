import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o,c as i,d as e,t as r,e as n,a as c,b as t}from"./app-C0hbX5Sc.js";const p={},d=t(`<h2 id="_1-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#_1-生命周期钩子"><span>1. 生命周期钩子</span></a></h2><p>生命周期的顺序，见下图：</p><figure><img src="https://mengblog-1305308047.cos.ap-guangzhou.myqcloud.com/202405151349328.png" alt="angular面试题及答案_angular面试" tabindex="0" loading="lazy"><figcaption>angular面试题及答案_angular面试</figcaption></figure><table><thead><tr><th style="text-align:left;">钩子方法</th><th style="text-align:left;">用途</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ngOnChanges()</code></td><td style="text-align:left;">当组件数据绑定的输入属性发生变化是触发，该方法接收一个SimpleChanges对象，包括当前值和上一个属性值。**首次调用一定发生在ngOnInit前，**值得注意的是该方法仅限于对象的引用发生变化时才会触发</td></tr><tr><td style="text-align:left;"><code>ngOnInit()</code></td><td style="text-align:left;">初始化指令或组件，在angular第一次显示展示组件的绑定属性后调用，该方法只会调用一次</td></tr><tr><td style="text-align:left;"><code>ngDoCheck()</code></td><td style="text-align:left;">检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应</td></tr><tr><td style="text-align:left;"><code>ngAfterContentInit()</code></td><td style="text-align:left;">当把内容投影进组件之后调用，第一次调用ngDocheck()之后调用，只调用一次，只适用于组件</td></tr><tr><td style="text-align:left;"><code>ngAfterContentChecked()</code></td><td style="text-align:left;">每次完成被投影组件内容的变更检测之后调用，只适用于组件</td></tr><tr><td style="text-align:left;"><code>ngAfterViewInit()</code></td><td style="text-align:left;">当 Angular 初始化完组件视图及其子视图或包含该指令的视图之后调用</td></tr><tr><td style="text-align:left;"><code>ngAfterViewChecked()</code></td><td style="text-align:left;">每次做完组件视图和子视图的变更检测之后调用，只适用于组件</td></tr><tr><td style="text-align:left;"><code>ngOnDestroy()</code></td><td style="text-align:left;">在angular每次销毁组件或指令之前调用，通常用于移除事件监听，退订可观察对象，以防内存泄露</td></tr></tbody></table><h2 id="_2-指令分类" tabindex="-1"><a class="header-anchor" href="#_2-指令分类"><span>2. 指令分类</span></a></h2><p>组件：用于构建UI组件，继承于Directive类</p><p>属性指令：用于改变组件的外观或行为</p><ul><li><code>ngClass</code></li><li><code>ngStyle</code></li></ul><p>结构指令：用于动态添加或删除DOM元素来改变DOM布局</p><ul><li><code>ngIf</code></li><li><code>ngFor</code></li><li><code>ngSwitch</code></li></ul><p>自定义指令</p><h2 id="_3-父子组件之间的数据传递" tabindex="-1"><a class="header-anchor" href="#_3-父子组件之间的数据传递"><span>3. 父子组件之间的数据传递</span></a></h2><ul><li><code>@Input</code> 父组件向子组件传递数据和传递方法(子组件中使用)</li><li><code>@output</code> 子组件传值给父组件 （事件传递的方式）（子组件中使用）</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">//子组件中使用事件发射器</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">output</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  somethingChanged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
somethingChanged<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>@ViewChid</code>父组件通过局部变量获取子组件的引用，主动获取子组件的数据和方法（父组件中使用）</li></ul><h2 id="_4-双向数据绑定的原理" tabindex="-1"><a class="header-anchor" href="#_4-双向数据绑定的原理"><span>4. 双向数据绑定的原理</span></a></h2><ul><li>data =&gt; view：数据绑定，模板语法 [ ]</li><li>view =&gt; data: 事件绑定，模板语法（）</li><li>angular的双向数据绑定就是 数据绑定 + 事件绑定 ，模板语法 [()]</li></ul><h2 id="_5-组件和指令的区别" tabindex="-1"><a class="header-anchor" href="#_5-组件和指令的区别"><span>5. 组件和指令的区别</span></a></h2><ul><li>component使用注解<code>@Component</code>修饰，directive使用注解<code>@Directive</code>修饰</li><li>component是组件化思想，基于组件创建应用，把应用划分成细小的可重复利用的组件，而directive用来在已经存在的DOM元素上实现一些行为</li><li>component是可重复使用的组件，directive是可重复使用的行为</li><li>component可创建一个view，即template或templateUrl，而directive没有。</li></ul><h2 id="_6-ng-content指令" tabindex="-1"><a class="header-anchor" href="#_6-ng-content指令"><span>6. ng-content指令？</span></a></h2><blockquote><p>像p标签或者h1标签，在标记之间可以添加内容，<code> &lt;p&gt;this is a paragraph&lt;/p&gt;</code>那我们如果想在angular的标签之间添加内容呢，例如在<code>&lt;app-test&gt;&lt;/app-test&gt;</code>,这种情况下就可以使用<code>&lt;ng-content&gt;tag directive is used&lt;/ng-content&gt; </code></p></blockquote><h2 id="_7-router-navigate-的使用" tabindex="-1"><a class="header-anchor" href="#_7-router-navigate-的使用"><span>7. router.navigate 的使用？</span></a></h2><blockquote><p>当我们想路由到一个组件的时候使用<code>router.navigate</code> <code>this.router.navigate([&#39;./component name&#39;])</code></p></blockquote><h2 id="_8-什么是viewencapsulation" tabindex="-1"><a class="header-anchor" href="#_8-什么是viewencapsulation"><span>8. 什么是ViewEncapsulation</span></a></h2><blockquote><p>ViewEncapsulation 决定组件中定义的样式是否会影响整个应用程序。在Angular中有三种方法可以做到这一点: Emulated : 样式从其他HTML传播到组件。 Native : 来自其他HTML的样式不会传播到组件。 None:组件中定义的样式对所有组件都是可见的。</p></blockquote><h2 id="_9-routeroutlet" tabindex="-1"><a class="header-anchor" href="#_9-routeroutlet"><span>9. RouterOutlet</span></a></h2><blockquote><p><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 简单理解：页面占位符,决定component显示在哪里，最终会被相应的component的view替换掉</p></blockquote>`,27),u={id:"_10-数据引用",tabindex:"-1"},h={class:"header-anchor",href:"#_10-数据引用"},g=t('<blockquote><p>与HTML标签一起使用，<code>&lt;h1&gt;{{var}}&lt;/h1&gt;</code> var 是来自于ts（component）中的值。</p></blockquote><h2 id="_11-有几种数据绑定方式" tabindex="-1"><a class="header-anchor" href="#_11-有几种数据绑定方式"><span>11. 有几种数据绑定方式？</span></a></h2><ul><li>属性绑定 [ ]</li><li>事件绑定（）</li><li>双向数据绑定 [()]</li></ul><h2 id="_12-单页面应用和传统的web技术有什么不同" tabindex="-1"><a class="header-anchor" href="#_12-单页面应用和传统的web技术有什么不同"><span>12. 单页面应用和传统的web技术有什么不同？</span></a></h2><blockquote><p>在传统的web技术中，客户端请求一个web页面(HTML/JSP/asp)，服务器返回资源(或HTML页面)，客户端再次请求另一个页面，服务器用另一个资源响应。问题就在于请求/响应中消耗了大量时间，或者是重新加载使用了大量时间。而在SPA技术中，即使URL不断变化，我们也只维护一个页面(index.HTML)。</p></blockquote><h2 id="_13-observables-和promises的区别" tabindex="-1"><a class="header-anchor" href="#_13-observables-和promises的区别"><span>13. Observables 和Promises的区别</span></a></h2><ul><li>Observables 是惰性的，意思是在subsciption之前什么都不会发生。</li></ul><p>​ Promise是eager的，意思是一旦创建，就会执行</p><ul><li>Observable是一个stream，可以传递0,1，或者多个事件，并且为每个事件回调。</li></ul><p>​ Promise只处理一个事件</p><ul><li>Observable可取消</li></ul><p>​ Promise不可取消</p><h2 id="_14-asyncpipe" tabindex="-1"><a class="header-anchor" href="#_14-asyncpipe"><span>14. AsyncPipe ？</span></a></h2><blockquote><p>当<code>observable</code>或pr<code>omise</code>返回<code>data</code>时，我们使用一个临时属性来保存内容。稍后，我们将相同的内容绑定到模板。通过使用<code>AsyncPipe</code>, <code>promise</code>或<code>observable</code>可以直接在模板中使用，而不需要临时属性。</p></blockquote><h2 id="_15-authentication-and-authorization的区别" tabindex="-1"><a class="header-anchor" href="#_15-authentication-and-authorization的区别"><span>15. Authentication and Authorization的区别？</span></a></h2>',15),b=e("li",null,[e("code",null,"Authentication (认证)"),n(" ： 用户登录凭据传递给(服务器上的)认证API。在服务器端验证凭据并返回JSON Web Token(JWT)。JWT是一个JSON对象，它有关于当前用户的一些信息或属性。一旦JWT返回给给客户端，客户端或用户将被该JWT所标记。")],-1),k=e("code",null,"Authorization（授权）",-1),m={href:"https://cloud.tencent.com/product/mfas?from_column=20065&from=20065",target:"_blank",rel:"noopener noreferrer"},_=t('<h2 id="_16-aot编译-和jit编译" tabindex="-1"><a class="header-anchor" href="#_16-aot编译-和jit编译"><span>16. AOT编译 和JIT编译？</span></a></h2><ul><li>Just-In-Time (JIT) 生成的JS代码，在浏览器中进行。</li></ul><p>​ — 大概的开发流程：</p><p>​ – 使用Typescript开发</p><p>​ – 使用tsc编译</p><p>​ – 打包、压缩、部署</p><p>​ 部署好之后，用户在浏览器端：</p><p>​ – 浏览器下载js代码</p><p>​ – angular启动，在浏览器中开始JIT的编译过程</p><p>​ – 渲染页面</p><ul><li>Ahead-of-Time（AOT）生成的是TS代码</li></ul><p>​ — 流程：</p><p>​ – typescript开发angular应用</p><p>​ – 用ngc编译</p><p>​ 用angular编译器对模板进行编译，生成typescript代码</p><p>​ typescript编译车JavaScript</p><p>​ – 打包部署</p><p>​ 用户端</p><p>​ – 下载代码</p><p>​ – 启动angular</p><p>​ – 页面渲染</p><p>​ AOT优势</p><p>​ 1、渲染得更快</p><p>​ 2、需要的异步请求更少</p><p>​ 3、需要下载的Angular框架体积更小</p><p>​ 4、提早检测模板错误</p><p>​ 5、更安全</p><p>​ JIT优势</p><p>​ 编译时间短，除非确实有动态组件的需求，否则jit唯一的优势就是能用来做在线 Demo和开发调试。</p><h2 id="_17-什么是redux" tabindex="-1"><a class="header-anchor" href="#_17-什么是redux"><span>17. 什么是Redux?</span></a></h2><blockquote><p>它是一个帮助我们维护应用程序状态的库。简单的数据流应用程序不需要Redux，它用于具有复杂数据流的单页应用程序。</p></blockquote><h2 id="_18-什么是pipes" tabindex="-1"><a class="header-anchor" href="#_18-什么是pipes"><span>18. 什么是Pipes?</span></a></h2><blockquote><p>此功能用于更改模板上的输出;比如将字符串更改为大写并在模板上显示它。它还可以相应地更改日期格式。</p></blockquote><h2 id="_19-ng-class-和-ng-style的区别" tabindex="-1"><a class="header-anchor" href="#_19-ng-class-和-ng-style的区别"><span>19. ng-Class 和 ng-Style的区别</span></a></h2><ul><li><code>ng-Class</code>: 加载css类</li><li><code>ng-Style</code>:设置css样式</li></ul><h2 id="_20-component和module的区别" tabindex="-1"><a class="header-anchor" href="#_20-component和module的区别"><span>20. component和module的区别？</span></a></h2><ul><li>component控制视图（html）.组件之间以及组件和service之间互相交互给app提供功能</li><li>module是包括一个或多个组件，module不会控制视图（HTML）。module声明了哪些模块可以被其他模块使用，依赖注入了哪些类，以及启动的component，模块来管理组件，使app实现模块化。</li></ul><h2 id="_21-怎样在组件中选择一个元素" tabindex="-1"><a class="header-anchor" href="#_21-怎样在组件中选择一个元素"><span>21. 怎样在组件中选择一个元素？</span></a></h2>',38),v=e("blockquote",{"css-module":"."},[e("p",null,"在组件的constructor中引入 ElementRef 来操作DOM元素 constructor(myElement: ElementRef)")],-1),f=t(`<h2 id="_22-设置base-href-标签的作用" tabindex="-1"><a class="header-anchor" href="#_22-设置base-href-标签的作用"><span>22. 设置base href 标签的作用？</span></a></h2><blockquote><p>angular路由器使用base href 作为组件、模板的基地址，开发期间，通常会在index.html所在目录中启动服务器，所以这个目录就是根目录，所以可以在index.html 的顶部添加<base href="”/”">。 当没有配置base标签时，加载应用会失败。</p></blockquote><h2 id="_23-observer-observable" tabindex="-1"><a class="header-anchor" href="#_23-observer-observable"><span>23. Observer / Observable</span></a></h2><ul><li>Observable（可观察者） 接受一个Observer作为参数然后返回unsubscribe函数</li></ul><p>​ – 特征：</p><p>​ — 是一个函数</p><p>​ — 接受一个Observer对象（包含next、error、complete方法的对象）作为参数</p><p>​ — 返回 unsubscribe 函数，用于取消订阅</p><p>​ – 作用：</p><p>​ — 作为生产者和观察者之间的桥梁，并返回一种方法来解除生产者和观察者之间的关系，其中观察者用于处理时间序列上的数据流。</p><ul><li>Observer (观察者)对象</li></ul><p>观察者用来接收可观察者发送过来的消息</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token punctuation">{</span>     
	<span class="token function-variable function">next</span> <span class="token operator">:</span> x <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Observer got a next value&#39;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>     
	<span class="token function-variable function">error</span> <span class="token operator">:</span> err <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Observer got a error:&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>     
	<span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Observer got a complete notification&#39;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>     
使用 observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-constructor-和-ngoninit-的本质区别" tabindex="-1"><a class="header-anchor" href="#_24-constructor-和-ngoninit-的本质区别"><span>24. Constructor 和 ngOnInit 的本质区别</span></a></h2><ul><li><strong>Constructor</strong></li></ul><blockquote><p>在ES6中 constructor表示构造函数，使用在class中。来初始化操作。当类被初始化之后，构造函数会被调用</p></blockquote><ul><li><strong>ngOnInit</strong></li></ul><blockquote><p>ngOnInit 是angular中OnInit钩子的实现，用来初始化组件。 ngOnInit : 在angular 第一次显示数据绑定和设置指令、组件的输入属性之后，初始化指令、组件 所以从angular的生命周期看，constructor是执行在先的 所以既然ngOnchanges是输入属性发生变化的时候调用，并且ngOnInit是在ngOnchanges执行之后才调用，而constructor是在组件实例化的时候就调用了，也就是说，在constructor中是取不到输入属性的值的。</p></blockquote><ul><li><p><strong>使用场景</strong></p><ul><li><p>constructor 中不适合进行任何和组件通信类似的复杂操作，一般在constructor中进行一些简单的初始化操作，比如依赖注入、变量初始化等。</p></li><li><p>ngOnInit可以用来初始化组件之间通信的，如异步请求等</p></li></ul></li></ul><h3 id="_25-angular的懒加载" tabindex="-1"><a class="header-anchor" href="#_25-angular的懒加载"><span>25. Angular的懒加载</span></a></h3><blockquote><p>默认情况下，在初始化的时候所有路由都会加载，导致加载缓慢，启动速度慢，所以可以使用懒加载 懒加载 ： 通俗 的讲就是进入主模块之后，子模块不加载，等真正访问到子模块之后，再去加载。使用loadChildren配置路由 知识点：</p></blockquote><ul><li>RouterModule.forRoot() 用于主模块</li><li>RouterModule.forChild() 用于子模块</li><li>loadChildren</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>redirectTo<span class="token operator">:</span><span class="token string">&#39;child&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   
    <span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">&#39;child&#39;</span><span class="token punctuation">,</span>loadChildren<span class="token operator">:</span><span class="token string">&#39;./children-load/children-load.module#ChildrenLoadModule&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   	    			  	                 <span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">&#39;childNew&#39;</span><span class="token punctuation">,</span>loadChildren<span class="token operator">:</span><span class="token string">&#39;./children-newload/children-newload.module#ChildrenNewloadModule&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-如何优化angular-2应用程序来获得更好的性能" tabindex="-1"><a class="header-anchor" href="#_26-如何优化angular-2应用程序来获得更好的性能"><span>26. <strong>如何优化Angular 2应用程序来获得更好的性能？</strong></span></a></h3><blockquote><p>1）考虑AOT编译。</p><p>2）确保应用程序已经经过了捆绑，uglify和tree shaking。</p><p>3）确保应用程序不存在不必要的import语句。</p><p>4）确保应用中已经移除了不使用的第三方库。</p><p>5）所有dependencies 和dev-dependencies都是明确分离的。</p><p>6）如果应用程序较大时，我会考虑延迟加载而不是完全捆绑的应用程序。</p></blockquote><h2 id="_27-使用angular的好处" tabindex="-1"><a class="header-anchor" href="#_27-使用angular的好处"><span>27. 使用Angular的好处</span></a></h2><ul><li>可以添加自定义的directive.</li><li>优秀的社区支持。</li><li>客户端和服务器的通讯非常便利。</li><li>强大的功能比如动画和事件处理。</li><li>使用mvc模式。</li><li>支持双向数据绑定。</li><li>支持依赖注入， restful service和有效验证。</li></ul><h2 id="_28-angular的核心部件有哪些" tabindex="-1"><a class="header-anchor" href="#_28-angular的核心部件有哪些"><span>28. Angular的核心部件有哪些?</span></a></h2><blockquote><p>1、模块（Modules）</p><p>2、组件（Components）</p><p>3、模版（Templates）</p><p>4、元数据（Metadata）</p><p>5、数据绑定（Data Binding）</p><p>6、指令（Directives）</p><p>7、服务（Services）</p><p>8、依赖注入（Dependency Injection）</p><p>9、路由（routing）</p></blockquote><h2 id="_29-列举一下angular中的filter类型" tabindex="-1"><a class="header-anchor" href="#_29-列举一下angular中的filter类型"><span>29. 列举一下Angular中的filter类型</span></a></h2><blockquote><p>Currency. Date. Filter. Json. limitTo lowercase number orderBy</p></blockquote><h2 id="_30-dirty-check是怎么回事" tabindex="-1"><a class="header-anchor" href="#_30-dirty-check是怎么回事"><span>30. Dirty check是怎么回事?</span></a></h2><blockquote><p>Dirty check是比较新的数据跟老的数据的差别，如果看到有改变, 就用新的数据更新现有的视图。</p></blockquote><h2 id="_31-dom和bom的区别是什么" tabindex="-1"><a class="header-anchor" href="#_31-dom和bom的区别是什么"><span>31. DOM和BOM的区别是什么?</span></a></h2><ul><li>Dom是document object model。Bom是browser object model。</li><li>DOM代表的是网页的内容。Bom包含dom, 它还包含有浏览器的属性。</li><li>Dom是一棵树结构，通过对应的API来访问里面的数据。Bom包含在全局的JavaScript对象里面，是window object的子成员。</li><li>Dom用来操作html文档。Bom用来操作浏览器窗口。</li><li>Dom有w3c的标准。Bom,对各个浏览器来说都是有自己具体的实现，都不一样。</li></ul><h2 id="_32-模板驱动表单和-响应式表单的比较" tabindex="-1"><a class="header-anchor" href="#_32-模板驱动表单和-响应式表单的比较"><span>32. 模板驱动表单和 响应式表单的比较</span></a></h2><blockquote><p><strong>Template-Driven Forms (模板驱动表单) 的特点</strong></p></blockquote><ul><li>使用方便</li><li>适用于简单的场景</li><li>通过 [(ngModel)] 实现数据双向绑定</li><li>最小化组件类的代码</li><li>不易于单元测试</li></ul><blockquote><p><strong>Reactive Forms (响应式表单) 的特点</strong></p></blockquote><ul><li>比较灵活</li><li>适用于复杂的场景</li><li>简化了HTML模板的代码，把验证逻辑抽离到组件类中</li><li>方便的跟踪表单控件值的变化</li><li>易于单元测试</li></ul><h2 id="_33-contentchild-与-viewchild-的异同点" tabindex="-1"><a class="header-anchor" href="#_33-contentchild-与-viewchild-的异同点"><span>33. ContentChild 与 ViewChild 的异同点</span></a></h2><blockquote><p>相同点</p></blockquote><ul><li>都是属性装饰器</li><li>都有对应的复数形式装饰器：ContentChildren、ViewChildren</li><li>都支持 Type(any) |Function|string 类型的选择器</li></ul><blockquote><p>不同点</p></blockquote><ul><li>ContentChild 用来从通过 Content Projection 方式 (ng-content) 设置的视图中获取匹配的元素</li><li>ViewChild 用来从模板视图中获取匹配的元素</li><li>在父组件的 ngAfterContentInit 生命周期钩子中才能成功获取通过 ContentChild 查询的元素</li><li>在父组件的 ngAfterViewInit 生命周期钩子中才能成功获取通过 ViewChild 查询的元素</li></ul>`,45);function y(x,A){const a=s("ExternalLinkIcon");return o(),i("div",null,[d,e("h2",u,[e("a",h,[e("span",null,"10. "+r()+"数据引用",1)])]),g,e("ul",null,[b,e("li",null,[k,n("：登录成功后，经过"),e("a",m,[n("身份验证"),c(a)]),n("或真正的用户不能访问所有内容。用户未被授权访问其他人的数据，他/她被授权访问某些数据。")])]),_,v,f])}const w=l(p,[["render",y],["__file","Angular面试题汇总.html.vue"]]),q=JSON.parse('{"path":"/interview/Angular/Angular%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB.html","title":"Angular面试题汇总","lang":"zh-CN","frontmatter":{"title":"Angular面试题汇总","order":1,"author":"Ms.LM","date":"2024-05-15T00:00:00.000Z","footer":"加油！","copyright":"Copyright © 2024-present Mr.LM","description":"1. 生命周期钩子 生命周期的顺序，见下图： angular面试题及答案_angular面试angular面试题及答案_angular面试 2. 指令分类 组件：用于构建UI组件，继承于Directive类 属性指令：用于改变组件的外观或行为 ngClass ngStyle 结构指令：用于动态添加或删除DOM元素来改变DOM布局 ngIf ngFor ...","head":[["link",{"rel":"canonical","href":"https://mengblog.cn/interview/Angular/Angular%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB.html"}],["meta",{"property":"og:url","content":"https://mengblog.cn/interview/Angular/Angular%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB.html"}],["meta",{"property":"og:site_name","content":"梦博客"}],["meta",{"property":"og:title","content":"Angular面试题汇总"}],["meta",{"property":"og:description","content":"1. 生命周期钩子 生命周期的顺序，见下图： angular面试题及答案_angular面试angular面试题及答案_angular面试 2. 指令分类 组件：用于构建UI组件，继承于Directive类 属性指令：用于改变组件的外观或行为 ngClass ngStyle 结构指令：用于动态添加或删除DOM元素来改变DOM布局 ngIf ngFor ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mengblog-1305308047.cos.ap-guangzhou.myqcloud.com/202405151349328.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-15T07:01:44.000Z"}],["meta",{"property":"article:author","content":"Ms.LM"}],["meta",{"property":"article:published_time","content":"2024-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-15T07:01:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Angular面试题汇总\\",\\"image\\":[\\"https://mengblog-1305308047.cos.ap-guangzhou.myqcloud.com/202405151349328.png\\"],\\"datePublished\\":\\"2024-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-15T07:01:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.LM\\"}]}"]]},"headers":[{"level":2,"title":"1. 生命周期钩子","slug":"_1-生命周期钩子","link":"#_1-生命周期钩子","children":[]},{"level":2,"title":"2. 指令分类","slug":"_2-指令分类","link":"#_2-指令分类","children":[]},{"level":2,"title":"3. 父子组件之间的数据传递","slug":"_3-父子组件之间的数据传递","link":"#_3-父子组件之间的数据传递","children":[]},{"level":2,"title":"4. 双向数据绑定的原理","slug":"_4-双向数据绑定的原理","link":"#_4-双向数据绑定的原理","children":[]},{"level":2,"title":"5. 组件和指令的区别","slug":"_5-组件和指令的区别","link":"#_5-组件和指令的区别","children":[]},{"level":2,"title":"6. ng-content指令？","slug":"_6-ng-content指令","link":"#_6-ng-content指令","children":[]},{"level":2,"title":"7. router.navigate 的使用？","slug":"_7-router-navigate-的使用","link":"#_7-router-navigate-的使用","children":[]},{"level":2,"title":"8. 什么是ViewEncapsulation","slug":"_8-什么是viewencapsulation","link":"#_8-什么是viewencapsulation","children":[]},{"level":2,"title":"9.  RouterOutlet","slug":"_9-routeroutlet","link":"#_9-routeroutlet","children":[]},{"level":2,"title":"10. {{}}数据引用","slug":"_10-数据引用","link":"#_10-数据引用","children":[]},{"level":2,"title":"11.  有几种数据绑定方式？","slug":"_11-有几种数据绑定方式","link":"#_11-有几种数据绑定方式","children":[]},{"level":2,"title":"12. 单页面应用和传统的web技术有什么不同？","slug":"_12-单页面应用和传统的web技术有什么不同","link":"#_12-单页面应用和传统的web技术有什么不同","children":[]},{"level":2,"title":"13. Observables 和Promises的区别","slug":"_13-observables-和promises的区别","link":"#_13-observables-和promises的区别","children":[]},{"level":2,"title":"14. AsyncPipe ？","slug":"_14-asyncpipe","link":"#_14-asyncpipe","children":[]},{"level":2,"title":"15. Authentication and Authorization的区别？","slug":"_15-authentication-and-authorization的区别","link":"#_15-authentication-and-authorization的区别","children":[]},{"level":2,"title":"16. AOT编译 和JIT编译？","slug":"_16-aot编译-和jit编译","link":"#_16-aot编译-和jit编译","children":[]},{"level":2,"title":"17. 什么是Redux?","slug":"_17-什么是redux","link":"#_17-什么是redux","children":[]},{"level":2,"title":"18. 什么是Pipes?","slug":"_18-什么是pipes","link":"#_18-什么是pipes","children":[]},{"level":2,"title":"19. ng-Class 和 ng-Style的区别","slug":"_19-ng-class-和-ng-style的区别","link":"#_19-ng-class-和-ng-style的区别","children":[]},{"level":2,"title":"20. component和module的区别？","slug":"_20-component和module的区别","link":"#_20-component和module的区别","children":[]},{"level":2,"title":"21. 怎样在组件中选择一个元素？","slug":"_21-怎样在组件中选择一个元素","link":"#_21-怎样在组件中选择一个元素","children":[]},{"level":2,"title":"22. 设置base href 标签的作用？","slug":"_22-设置base-href-标签的作用","link":"#_22-设置base-href-标签的作用","children":[]},{"level":2,"title":"23.  Observer / Observable","slug":"_23-observer-observable","link":"#_23-observer-observable","children":[]},{"level":2,"title":"24. Constructor 和 ngOnInit 的本质区别","slug":"_24-constructor-和-ngoninit-的本质区别","link":"#_24-constructor-和-ngoninit-的本质区别","children":[{"level":3,"title":"25.  Angular的懒加载","slug":"_25-angular的懒加载","link":"#_25-angular的懒加载","children":[]},{"level":3,"title":"26. 如何优化Angular 2应用程序来获得更好的性能？","slug":"_26-如何优化angular-2应用程序来获得更好的性能","link":"#_26-如何优化angular-2应用程序来获得更好的性能","children":[]}]},{"level":2,"title":"27. 使用Angular的好处","slug":"_27-使用angular的好处","link":"#_27-使用angular的好处","children":[]},{"level":2,"title":"28.  Angular的核心部件有哪些?","slug":"_28-angular的核心部件有哪些","link":"#_28-angular的核心部件有哪些","children":[]},{"level":2,"title":"29.   列举一下Angular中的filter类型","slug":"_29-列举一下angular中的filter类型","link":"#_29-列举一下angular中的filter类型","children":[]},{"level":2,"title":"30. Dirty check是怎么回事?","slug":"_30-dirty-check是怎么回事","link":"#_30-dirty-check是怎么回事","children":[]},{"level":2,"title":"31. DOM和BOM的区别是什么?","slug":"_31-dom和bom的区别是什么","link":"#_31-dom和bom的区别是什么","children":[]},{"level":2,"title":"32. 模板驱动表单和 响应式表单的比较","slug":"_32-模板驱动表单和-响应式表单的比较","link":"#_32-模板驱动表单和-响应式表单的比较","children":[]},{"level":2,"title":"33. ContentChild 与 ViewChild 的异同点","slug":"_33-contentchild-与-viewchild-的异同点","link":"#_33-contentchild-与-viewchild-的异同点","children":[]}],"git":{"createdTime":1715756504000,"updatedTime":1715756504000,"contributors":[{"name":"Mr.LM","email":"wz0608@outlook.com","commits":1}]},"readingTime":{"minutes":11,"words":3299},"filePathRelative":"interview/Angular/Angular面试题汇总.md","localizedDate":"2024年5月15日","copyright":{"author":"Ms.LM"},"autoDesc":true,"excerpt":"<h2>1. 生命周期钩子</h2>\\n<p>生命周期的顺序，见下图：</p>\\n<figure><img src=\\"https://mengblog-1305308047.cos.ap-guangzhou.myqcloud.com/202405151349328.png\\" alt=\\"angular面试题及答案_angular面试\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>angular面试题及答案_angular面试</figcaption></figure>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:left\\">钩子方法</th>\\n<th style=\\"text-align:left\\">用途</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngOnChanges()</code></td>\\n<td style=\\"text-align:left\\">当组件数据绑定的输入属性发生变化是触发，该方法接收一个SimpleChanges对象，包括当前值和上一个属性值。**首次调用一定发生在ngOnInit前，**值得注意的是该方法仅限于对象的引用发生变化时才会触发</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngOnInit()</code></td>\\n<td style=\\"text-align:left\\">初始化指令或组件，在angular第一次显示展示组件的绑定属性后调用，该方法只会调用一次</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngDoCheck()</code></td>\\n<td style=\\"text-align:left\\">检测，并在发生 Angular 无法或不愿意自己检测的变化时作出反应</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngAfterContentInit()</code></td>\\n<td style=\\"text-align:left\\">当把内容投影进组件之后调用，第一次调用ngDocheck()之后调用，只调用一次，只适用于组件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngAfterContentChecked()</code></td>\\n<td style=\\"text-align:left\\">每次完成被投影组件内容的变更检测之后调用，只适用于组件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngAfterViewInit()</code></td>\\n<td style=\\"text-align:left\\">当 Angular 初始化完组件视图及其子视图或包含该指令的视图之后调用</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngAfterViewChecked()</code></td>\\n<td style=\\"text-align:left\\">每次做完组件视图和子视图的变更检测之后调用，只适用于组件</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:left\\"><code>ngOnDestroy()</code></td>\\n<td style=\\"text-align:left\\">在angular每次销毁组件或指令之前调用，通常用于移除事件监听，退订可观察对象，以防内存泄露</td>\\n</tr>\\n</tbody>\\n</table>"}');export{w as comp,q as data};
